{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { EventTypes } from \"../interfaces\";\nvar RotationGestureDetector = function () {\n  function RotationGestureDetector(callbacks) {\n    _classCallCheck(this, RotationGestureDetector);\n    _defineProperty(this, \"onRotationBegin\", void 0);\n    _defineProperty(this, \"onRotation\", void 0);\n    _defineProperty(this, \"onRotationEnd\", void 0);\n    _defineProperty(this, \"currentTime\", 0);\n    _defineProperty(this, \"previousTime\", 0);\n    _defineProperty(this, \"previousAngle\", 0);\n    _defineProperty(this, \"rotation\", 0);\n    _defineProperty(this, \"anchorX\", 0);\n    _defineProperty(this, \"anchorY\", 0);\n    _defineProperty(this, \"isInProgress\", false);\n    _defineProperty(this, \"keyPointers\", [NaN, NaN]);\n    this.onRotationBegin = callbacks.onRotationBegin;\n    this.onRotation = callbacks.onRotation;\n    this.onRotationEnd = callbacks.onRotationEnd;\n  }\n  _createClass(RotationGestureDetector, [{\n    key: \"updateCurrent\",\n    value: function updateCurrent(event, tracker) {\n      this.previousTime = this.currentTime;\n      this.currentTime = event.time;\n      var _this$keyPointers = _slicedToArray(this.keyPointers, 2),\n        firstPointerID = _this$keyPointers[0],\n        secondPointerID = _this$keyPointers[1];\n      var firstPointerX = tracker.getLastX(firstPointerID);\n      var firstPointerY = tracker.getLastY(firstPointerID);\n      var secondPointerX = tracker.getLastX(secondPointerID);\n      var secondPointerY = tracker.getLastY(secondPointerID);\n      var vectorX = secondPointerX - firstPointerX;\n      var vectorY = secondPointerY - firstPointerY;\n      this.anchorX = (firstPointerX + secondPointerX) / 2;\n      this.anchorY = (firstPointerY + secondPointerY) / 2;\n      var angle = -Math.atan2(vectorY, vectorX);\n      this.rotation = Number.isNaN(this.previousAngle) ? 0 : this.previousAngle - angle;\n      this.previousAngle = angle;\n      if (this.rotation > Math.PI) {\n        this.rotation -= Math.PI;\n      } else if (this.rotation < -Math.PI) {\n        this.rotation += Math.PI;\n      }\n      if (this.rotation > Math.PI / 2) {\n        this.rotation -= Math.PI;\n      } else if (this.rotation < -Math.PI / 2) {\n        this.rotation += Math.PI;\n      }\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      if (!this.isInProgress) {\n        return;\n      }\n      this.isInProgress = false;\n      this.keyPointers = [NaN, NaN];\n      this.onRotationEnd(this);\n    }\n  }, {\n    key: \"setKeyPointers\",\n    value: function setKeyPointers(tracker) {\n      if (this.keyPointers[0] && this.keyPointers[1]) {\n        return;\n      }\n      var pointerIDs = tracker.getData().keys();\n      this.keyPointers[0] = pointerIDs.next().value;\n      this.keyPointers[1] = pointerIDs.next().value;\n    }\n  }, {\n    key: \"onTouchEvent\",\n    value: function onTouchEvent(event, tracker) {\n      switch (event.eventType) {\n        case EventTypes.DOWN:\n          this.isInProgress = false;\n          break;\n        case EventTypes.ADDITIONAL_POINTER_DOWN:\n          if (this.isInProgress) {\n            break;\n          }\n          this.isInProgress = true;\n          this.previousTime = event.time;\n          this.previousAngle = NaN;\n          this.setKeyPointers(tracker);\n          this.updateCurrent(event, tracker);\n          this.onRotationBegin(this);\n          break;\n        case EventTypes.MOVE:\n          if (!this.isInProgress) {\n            break;\n          }\n          this.updateCurrent(event, tracker);\n          this.onRotation(this);\n          break;\n        case EventTypes.ADDITIONAL_POINTER_UP:\n          if (!this.isInProgress) {\n            break;\n          }\n          if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n            this.finish();\n          }\n          break;\n        case EventTypes.UP:\n          if (this.isInProgress) {\n            this.finish();\n          }\n          break;\n      }\n      return true;\n    }\n  }, {\n    key: \"getTimeDelta\",\n    value: function getTimeDelta() {\n      return this.currentTime + this.previousTime;\n    }\n  }, {\n    key: \"getAnchorX\",\n    value: function getAnchorX() {\n      return this.anchorX;\n    }\n  }, {\n    key: \"getAnchorY\",\n    value: function getAnchorY() {\n      return this.anchorY;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this.rotation;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.keyPointers = [NaN, NaN];\n      this.isInProgress = false;\n    }\n  }]);\n  return RotationGestureDetector;\n}();\nexport { RotationGestureDetector as default };","map":{"version":3,"names":["EventTypes","RotationGestureDetector","callbacks","_classCallCheck","_defineProperty","NaN","onRotationBegin","onRotation","onRotationEnd","_createClass","key","value","updateCurrent","event","tracker","previousTime","currentTime","time","_this$keyPointers","_slicedToArray","keyPointers","firstPointerID","secondPointerID","firstPointerX","getLastX","firstPointerY","getLastY","secondPointerX","secondPointerY","vectorX","vectorY","anchorX","anchorY","angle","Math","atan2","rotation","Number","isNaN","previousAngle","PI","finish","isInProgress","setKeyPointers","pointerIDs","getData","keys","next","onTouchEvent","eventType","DOWN","ADDITIONAL_POINTER_DOWN","MOVE","ADDITIONAL_POINTER_UP","indexOf","pointerId","UP","getTimeDelta","getAnchorX","getAnchorY","getRotation","reset","default"],"sources":["C:\\alt\\projects\\school\\3035\\QueryLake\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\detectors\\RotationGestureDetector.ts"],"sourcesContent":["import { AdaptedEvent, EventTypes } from '../interfaces';\nimport PointerTracker from '../tools/PointerTracker';\n\nexport interface RotationGestureListener {\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n}\n\nexport default class RotationGestureDetector\n  implements RotationGestureListener\n{\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n\n  private currentTime = 0;\n  private previousTime = 0;\n\n  private previousAngle = 0;\n  private rotation = 0;\n\n  private anchorX = 0;\n  private anchorY = 0;\n\n  private isInProgress = false;\n\n  private keyPointers: number[] = [NaN, NaN];\n\n  constructor(callbacks: RotationGestureListener) {\n    this.onRotationBegin = callbacks.onRotationBegin;\n    this.onRotation = callbacks.onRotation;\n    this.onRotationEnd = callbacks.onRotationEnd;\n  }\n\n  private updateCurrent(event: AdaptedEvent, tracker: PointerTracker): void {\n    this.previousTime = this.currentTime;\n    this.currentTime = event.time;\n\n    const [firstPointerID, secondPointerID] = this.keyPointers;\n\n    const firstPointerX: number = tracker.getLastX(firstPointerID);\n    const firstPointerY: number = tracker.getLastY(firstPointerID);\n    const secondPointerX: number = tracker.getLastX(secondPointerID);\n    const secondPointerY: number = tracker.getLastY(secondPointerID);\n\n    const vectorX: number = secondPointerX - firstPointerX;\n    const vectorY: number = secondPointerY - firstPointerY;\n\n    this.anchorX = (firstPointerX + secondPointerX) / 2;\n    this.anchorY = (firstPointerY + secondPointerY) / 2;\n\n    //Angle diff should be positive when rotating in clockwise direction\n    const angle: number = -Math.atan2(vectorY, vectorX);\n\n    this.rotation = Number.isNaN(this.previousAngle)\n      ? 0\n      : this.previousAngle - angle;\n\n    this.previousAngle = angle;\n\n    if (this.rotation > Math.PI) {\n      this.rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI) {\n      this.rotation += Math.PI;\n    }\n\n    if (this.rotation > Math.PI / 2) {\n      this.rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI / 2) {\n      this.rotation += Math.PI;\n    }\n  }\n\n  private finish(): void {\n    if (!this.isInProgress) {\n      return;\n    }\n\n    this.isInProgress = false;\n    this.keyPointers = [NaN, NaN];\n    this.onRotationEnd(this);\n  }\n\n  private setKeyPointers(tracker: PointerTracker): void {\n    if (this.keyPointers[0] && this.keyPointers[1]) {\n      return;\n    }\n\n    const pointerIDs: IterableIterator<number> = tracker.getData().keys();\n\n    this.keyPointers[0] = pointerIDs.next().value as number;\n    this.keyPointers[1] = pointerIDs.next().value as number;\n  }\n\n  public onTouchEvent(event: AdaptedEvent, tracker: PointerTracker): boolean {\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n        this.isInProgress = false;\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        if (this.isInProgress) {\n          break;\n        }\n        this.isInProgress = true;\n\n        this.previousTime = event.time;\n        this.previousAngle = NaN;\n\n        this.setKeyPointers(tracker);\n\n        this.updateCurrent(event, tracker);\n        this.onRotationBegin(this);\n        break;\n\n      case EventTypes.MOVE:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        this.updateCurrent(event, tracker);\n        this.onRotation(this);\n\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n          this.finish();\n        }\n\n        break;\n\n      case EventTypes.UP:\n        if (this.isInProgress) {\n          this.finish();\n        }\n        break;\n    }\n\n    return true;\n  }\n\n  public getTimeDelta(): number {\n    return this.currentTime + this.previousTime;\n  }\n\n  public getAnchorX(): number {\n    return this.anchorX;\n  }\n\n  public getAnchorY(): number {\n    return this.anchorY;\n  }\n\n  public getRotation(): number {\n    return this.rotation;\n  }\n\n  public reset(): void {\n    this.keyPointers = [NaN, NaN];\n    this.isInProgress = false;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAAuBA,UAAvB;AAAA,IASqBC,uBAAN;EAoBb,SAAAA,wBAAYC,SAAD,EAAqC;IAAAC,eAAA,OAAAF,uBAAA;IAAAG,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA,sBAb1B,CAa0B;IAAAA,eAAA,uBAZzB,CAYyB;IAAAA,eAAA,wBAVxB,CAUwB;IAAAA,eAAA,mBAT7B,CAS6B;IAAAA,eAAA,kBAP9B,CAO8B;IAAAA,eAAA,kBAN9B,CAM8B;IAAAA,eAAA,uBAJzB,KAIyB;IAAAA,eAAA,sBAFhB,CAACC,GAAD,EAAMA,GAAN,CAEgB;IAC9C,KAAKC,eAAL,GAAuBJ,SAAS,CAACI,eAAjC;IACA,KAAKC,UAAL,GAAkBL,SAAS,CAACK,UAA5B;IACA,KAAKC,aAAL,GAAqBN,SAAS,CAACM,aAA/B;EACD;EAAAC,YAAA,CAAAR,uBAAA;IAAAS,GAAA;IAAAC,KAAA,EAEO,SAAAC,cAAcC,KAAD,EAAsBC,OAAtB,EAAqD;MACxE,KAAKC,YAAL,GAAoB,KAAKC,WAAzB;MACA,KAAKA,WAAL,GAAmBH,KAAK,CAACI,IAAzB;MAEA,IAAAC,iBAAA,GAAAC,cAAA,CAA0C,KAAKC,WAA/C;QAAOC,cAAD,GAAAH,iBAAA;QAAiBI,eAAjB,GAAAJ,iBAAA;MAEN,IAAMK,aAAqB,GAAGT,OAAO,CAACU,QAAR,CAAiBH,cAAjB,CAA9B;MACA,IAAMI,aAAqB,GAAGX,OAAO,CAACY,QAAR,CAAiBL,cAAjB,CAA9B;MACA,IAAMM,cAAsB,GAAGb,OAAO,CAACU,QAAR,CAAiBF,eAAjB,CAA/B;MACA,IAAMM,cAAsB,GAAGd,OAAO,CAACY,QAAR,CAAiBJ,eAAjB,CAA/B;MAEA,IAAMO,OAAe,GAAGF,cAAc,GAAGJ,aAAzC;MACA,IAAMO,OAAe,GAAGF,cAAc,GAAGH,aAAzC;MAEA,KAAKM,OAAL,GAAe,CAACR,aAAa,GAAGI,cAAjB,IAAmC,CAAlD;MACA,KAAKK,OAAL,GAAe,CAACP,aAAa,GAAGG,cAAjB,IAAmC,CAAlD;MAGA,IAAMK,KAAa,GAAG,CAACC,IAAI,CAACC,KAAL,CAAWL,OAAX,EAAoBD,OAApB,CAAvB;MAEA,KAAKO,QAAL,GAAgBC,MAAM,CAACC,KAAP,CAAa,KAAKC,aAAlB,IACZ,CADY,GAEZ,KAAKA,aAAL,GAAqBN,KAFzB;MAIA,KAAKM,aAAL,GAAqBN,KAArB;MAEA,IAAI,KAAKG,QAAL,GAAgBF,IAAI,CAACM,EAAzB,EAA6B;QAC3B,KAAKJ,QAAL,IAAiBF,IAAI,CAACM,EAAtB;MACD,CAFD,MAEO,IAAI,KAAKJ,QAAL,GAAgB,CAACF,IAAI,CAACM,EAA1B,EAA8B;QACnC,KAAKJ,QAAL,IAAiBF,IAAI,CAACM,EAAtB;MACD;MAED,IAAI,KAAKJ,QAAL,GAAgBF,IAAI,CAACM,EAAL,GAAU,CAA9B,EAAiC;QAC/B,KAAKJ,QAAL,IAAiBF,IAAI,CAACM,EAAtB;MACD,CAFD,MAEO,IAAI,KAAKJ,QAAL,GAAgB,CAACF,IAAI,CAACM,EAAN,GAAW,CAA/B,EAAkC;QACvC,KAAKJ,QAAL,IAAiBF,IAAI,CAACM,EAAtB;MACD;IACF;EAAA;IAAA9B,GAAA;IAAAC,KAAA,EAEO,SAAA8B,OAAA,EAAe;MACrB,IAAI,CAAC,KAAKC,YAAV,EAAwB;QACtB;MACD;MAED,KAAKA,YAAL,GAAoB,KAApB;MACA,KAAKtB,WAAL,GAAmB,CAACf,GAAD,EAAMA,GAAN,CAAnB;MACA,KAAKG,aAAL,CAAmB,IAAnB;IACD;EAAA;IAAAE,GAAA;IAAAC,KAAA,EAEO,SAAAgC,eAAe7B,OAAD,EAAgC;MACpD,IAAI,KAAKM,WAAL,CAAiB,CAAjB,KAAuB,KAAKA,WAAL,CAAiB,CAAjB,CAA3B,EAAgD;QAC9C;MACD;MAED,IAAMwB,UAAoC,GAAG9B,OAAO,CAAC+B,OAAR,GAAkBC,IAAlB,EAA7C;MAEA,KAAK1B,WAAL,CAAiB,CAAjB,IAAsBwB,UAAU,CAACG,IAAX,GAAkBpC,KAAxC;MACA,KAAKS,WAAL,CAAiB,CAAjB,IAAsBwB,UAAU,CAACG,IAAX,GAAkBpC,KAAxC;IACD;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAEM,SAAAqC,aAAanC,KAAD,EAAsBC,OAAtB,EAAwD;MACzE,QAAQD,KAAK,CAACoC,SAAd;QACE,KAAKjD,UAAU,CAACkD,IAAhB;UACE,KAAKR,YAAL,GAAoB,KAApB;UACA;QAEF,KAAK1C,UAAU,CAACmD,uBAAhB;UACE,IAAI,KAAKT,YAAT,EAAuB;YACrB;UACD;UACD,KAAKA,YAAL,GAAoB,IAApB;UAEA,KAAK3B,YAAL,GAAoBF,KAAK,CAACI,IAA1B;UACA,KAAKsB,aAAL,GAAqBlC,GAArB;UAEA,KAAKsC,cAAL,CAAoB7B,OAApB;UAEA,KAAKF,aAAL,CAAmBC,KAAnB,EAA0BC,OAA1B;UACA,KAAKR,eAAL,CAAqB,IAArB;UACA;QAEF,KAAKN,UAAU,CAACoD,IAAhB;UACE,IAAI,CAAC,KAAKV,YAAV,EAAwB;YACtB;UACD;UAED,KAAK9B,aAAL,CAAmBC,KAAnB,EAA0BC,OAA1B;UACA,KAAKP,UAAL,CAAgB,IAAhB;UAEA;QAEF,KAAKP,UAAU,CAACqD,qBAAhB;UACE,IAAI,CAAC,KAAKX,YAAV,EAAwB;YACtB;UACD;UAED,IAAI,KAAKtB,WAAL,CAAiBkC,OAAjB,CAAyBzC,KAAK,CAAC0C,SAA/B,KAA6C,CAAjD,EAAoD;YAClD,KAAKd,MAAL;UACD;UAED;QAEF,KAAKzC,UAAU,CAACwD,EAAhB;UACE,IAAI,KAAKd,YAAT,EAAuB;YACrB,KAAKD,MAAL;UACD;UACD;MA7CJ;MAgDA,OAAO,IAAP;IACD;EAAA;IAAA/B,GAAA;IAAAC,KAAA,EAEM,SAAA8C,aAAA,EAAuB;MAC5B,OAAO,KAAKzC,WAAL,GAAmB,KAAKD,YAA/B;IACD;EAAA;IAAAL,GAAA;IAAAC,KAAA,EAEM,SAAA+C,WAAA,EAAqB;MAC1B,OAAO,KAAK3B,OAAZ;IACD;EAAA;IAAArB,GAAA;IAAAC,KAAA,EAEM,SAAAgD,WAAA,EAAqB;MAC1B,OAAO,KAAK3B,OAAZ;IACD;EAAA;IAAAtB,GAAA;IAAAC,KAAA,EAEM,SAAAiD,YAAA,EAAsB;MAC3B,OAAO,KAAKxB,QAAZ;IACD;EAAA;IAAA1B,GAAA;IAAAC,KAAA,EAEM,SAAAkD,MAAA,EAAc;MACnB,KAAKzC,WAAL,GAAmB,CAACf,GAAD,EAAMA,GAAN,CAAnB;MACA,KAAKqC,YAAL,GAAoB,KAApB;IACD;EAAA;EAAA,OAAAzC,uBAAA;AAAA;AAAA,SA7JkBA,uBAAN,IAAA6D,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}