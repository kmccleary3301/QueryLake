{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nexport var CodedError = function (_Error) {\n  _inherits(CodedError, _Error);\n  var _super = _createSuper(CodedError);\n  function CodedError(code, message) {\n    var _this;\n    _classCallCheck(this, CodedError);\n    _this = _super.call(this, message);\n    _this.code = code;\n    return _this;\n  }\n  return _createClass(CodedError);\n}(_wrapNativeSuper(Error));","map":{"version":3,"names":["CodedError","_Error","_inherits","_super","_createSuper","code","message","_this","_classCallCheck","call","_createClass","_wrapNativeSuper","Error"],"sources":["C:\\alt\\projects\\school\\3035\\QueryLake\\node_modules\\expo-modules-core\\src\\errors\\CodedError.ts"],"sourcesContent":["/**\n * A general error class that should be used for all errors in Expo modules.\n * Guarantees a `code` field that can be used to differentiate between different\n * types of errors without further subclassing Error.\n */\nexport class CodedError extends Error {\n  code: string;\n  info?: any;\n\n  constructor(code: string, message: string) {\n    super(message);\n    this.code = code;\n  }\n}\n"],"mappings":";;;;;;;;AAKA,WAAaA,UAAW,aAAAC,MAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,UAAA;EAItB,SAAAA,WAAYK,IAAY,EAAEC,OAAe;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAR,UAAA;IACvCO,KAAA,GAAAJ,MAAA,CAAAM,IAAA,OAAMH,OAAO;IACbC,KAAA,CAAKF,IAAI,GAAGA,IAAI;IAAC,OAAAE,KAAA;EACnB;EAAC,OAAAG,YAAA,CAAAV,UAAA;AAAA,EAAAW,gBAAA,CAP6BC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}