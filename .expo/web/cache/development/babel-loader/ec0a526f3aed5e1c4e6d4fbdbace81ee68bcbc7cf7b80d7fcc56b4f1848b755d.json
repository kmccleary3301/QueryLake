{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"onPress\", \"onLongPress\", \"onPressIn\", \"onPressOut\", \"to\", \"accessibilityRole\"],\n  _excluded2 = [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"allowFontScaling\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\", \"testID\", \"accessibilityLabel\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nvar LinkPressable = function LinkPressable(_ref) {\n  var children = _ref.children,\n    style = _ref.style,\n    _onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    onPressIn = _ref.onPressIn,\n    onPressOut = _ref.onPressOut,\n    to = _ref.to,\n    accessibilityRole = _ref.accessibilityRole,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  if (Platform.OS === 'web' && to) {\n    return React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: function onPress(e) {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n          e.preventDefault();\n          _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n        }\n      },\n      onLongPress: onLongPress != null ? onLongPress : undefined,\n      onPressIn: onPressIn != null ? onPressIn : undefined,\n      onPressOut: onPressOut != null ? onPressOut : undefined\n    }), children);\n  } else {\n    return React.createElement(PlatformPressable, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      onPress: _onPress\n    }), React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var icon = props.icon,\n    label = props.label,\n    labelStyle = props.labelStyle,\n    to = props.to,\n    _props$focused = props.focused,\n    focused = _props$focused === void 0 ? false : _props$focused,\n    allowFontScaling = props.allowFontScaling,\n    _props$activeTintColo = props.activeTintColor,\n    activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n    _props$inactiveTintCo = props.inactiveTintColor,\n    inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n    _props$activeBackgrou = props.activeBackgroundColor,\n    activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n    _props$inactiveBackgr = props.inactiveBackgroundColor,\n    inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n    style = props.style,\n    onPress = props.onPress,\n    pressColor = props.pressColor,\n    pressOpacity = props.pressOpacity,\n    testID = props.testID,\n    accessibilityLabel = props.accessibilityLabel,\n    rest = _objectWithoutProperties(props, _excluded2);\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n    _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n    borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(LinkPressable, {\n    testID: testID,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    allowFontScaling: allowFontScaling,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"names":["PlatformPressable","Link","useTheme","Color","React","Platform","StyleSheet","Text","View","LinkPressable","_ref","children","style","onPress","onLongPress","onPressIn","onPressOut","to","accessibilityRole","rest","_objectWithoutProperties","_excluded","OS","createElement","_extends","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","undefined","DrawerItem","props","_useTheme","colors","icon","label","labelStyle","_props$focused","focused","allowFontScaling","_props$activeTintColo","activeTintColor","primary","_props$inactiveTintCo","inactiveTintColor","text","alpha","rgb","string","_props$activeBackgrou","activeBackgroundColor","_props$inactiveBackgr","inactiveBackgroundColor","pressColor","pressOpacity","testID","accessibilityLabel","_excluded2","_StyleSheet$flatten","flatten","_StyleSheet$flatten$b","borderRadius","color","backgroundColor","iconNode","size","collapsable","container","wrapper","accessibilityState","selected","Fragment","marginLeft","marginVertical","numberOfLines","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["C:\\alt\\projects\\school\\3035\\QueryLake\\node_modules\\@react-navigation\\drawer\\src\\views\\DrawerItem.tsx"],"sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  allowFontScaling?: boolean;\n\n  /**\n   * Accessibility label for drawer item.\n   */\n  accessibilityLabel?: string;\n  /**\n   * ID to locate this drawer item in tests.\n   */\n  testID?: string;\n};\n\nconst LinkPressable = ({\n  children,\n  style,\n  onPress,\n  onLongPress,\n  onPressIn,\n  onPressOut,\n  to,\n  accessibilityRole,\n  ...rest\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\n  style: StyleProp<ViewStyle>;\n} & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n        // types for PressableProps and TextProps are incompatible with each other by `null` so we\n        // can't use {...rest} for these 3 props\n        onLongPress={onLongPress ?? undefined}\n        onPressIn={onPressIn ?? undefined}\n        onPressOut={onPressOut ?? undefined}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <PlatformPressable\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </PlatformPressable>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    testID,\n    accessibilityLabel,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <LinkPressable\n        testID={testID}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                allowFontScaling={allowFontScaling}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </LinkPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}