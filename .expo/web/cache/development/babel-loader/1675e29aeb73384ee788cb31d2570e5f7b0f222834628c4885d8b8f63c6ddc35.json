{"ast":null,"code":"import DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { State } from \"../../State\";\nimport { TouchEventType } from \"../../TouchEventType\";\nimport { findHandler, findOldGestureHandler } from \"../handlersRegistry\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nvar gestureHandlerEventSubscription = null;\nvar gestureHandlerStateChangeEventSubscription = null;\nvar gestureStateManagers = new Map();\nvar lastUpdateEvent = [];\nfunction isStateChangeEvent(event) {\n  return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n  return event.eventType != null;\n}\nexport function onGestureHandlerEvent(event) {\n  var _handler$handlers7, _handler$handlers7$on, _handler$handlers8, _handler$handlers8$on, _handler$handlers9, _handler$handlers9$on, _handler$handlers10, _handler$handlers10$o;\n  var handler = findHandler(event.handlerTag);\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n        var _handler$handlers$onB, _handler$handlers;\n        (_handler$handlers$onB = (_handler$handlers = handler.handlers).onBegin) === null || _handler$handlers$onB === void 0 ? void 0 : _handler$handlers$onB.call(_handler$handlers, event);\n      } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n        var _handler$handlers$onS, _handler$handlers2;\n        (_handler$handlers$onS = (_handler$handlers2 = handler.handlers).onStart) === null || _handler$handlers$onS === void 0 ? void 0 : _handler$handlers$onS.call(_handler$handlers2, event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        var _handler$handlers$onF, _handler$handlers4;\n        if (event.oldState === State.ACTIVE) {\n          var _handler$handlers$onE, _handler$handlers3;\n          (_handler$handlers$onE = (_handler$handlers3 = handler.handlers).onEnd) === null || _handler$handlers$onE === void 0 ? void 0 : _handler$handlers$onE.call(_handler$handlers3, event, true);\n        }\n        (_handler$handlers$onF = (_handler$handlers4 = handler.handlers).onFinalize) === null || _handler$handlers$onF === void 0 ? void 0 : _handler$handlers$onF.call(_handler$handlers4, event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.oldState !== event.state) {\n        var _handler$handlers$onF2, _handler$handlers6;\n        if (event.oldState === State.ACTIVE) {\n          var _handler$handlers$onE2, _handler$handlers5;\n          (_handler$handlers$onE2 = (_handler$handlers5 = handler.handlers).onEnd) === null || _handler$handlers$onE2 === void 0 ? void 0 : _handler$handlers$onE2.call(_handler$handlers5, event, false);\n        }\n        (_handler$handlers$onF2 = (_handler$handlers6 = handler.handlers).onFinalize) === null || _handler$handlers$onF2 === void 0 ? void 0 : _handler$handlers$onF2.call(_handler$handlers6, event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(event.handlerTag, GestureStateManager.create(event.handlerTag));\n      }\n      var manager = gestureStateManagers.get(event.handlerTag);\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          (_handler$handlers7 = handler.handlers) === null || _handler$handlers7 === void 0 ? void 0 : (_handler$handlers7$on = _handler$handlers7.onTouchesDown) === null || _handler$handlers7$on === void 0 ? void 0 : _handler$handlers7$on.call(_handler$handlers7, event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          (_handler$handlers8 = handler.handlers) === null || _handler$handlers8 === void 0 ? void 0 : (_handler$handlers8$on = _handler$handlers8.onTouchesMove) === null || _handler$handlers8$on === void 0 ? void 0 : _handler$handlers8$on.call(_handler$handlers8, event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          (_handler$handlers9 = handler.handlers) === null || _handler$handlers9 === void 0 ? void 0 : (_handler$handlers9$on = _handler$handlers9.onTouchesUp) === null || _handler$handlers9$on === void 0 ? void 0 : _handler$handlers9$on.call(_handler$handlers9, event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          (_handler$handlers10 = handler.handlers) === null || _handler$handlers10 === void 0 ? void 0 : (_handler$handlers10$o = _handler$handlers10.onTouchesCancelled) === null || _handler$handlers10$o === void 0 ? void 0 : _handler$handlers10$o.call(_handler$handlers10, event, manager);\n          break;\n      }\n    } else {\n      var _handler$handlers$onU, _handler$handlers11;\n      (_handler$handlers$onU = (_handler$handlers11 = handler.handlers).onUpdate) === null || _handler$handlers$onU === void 0 ? void 0 : _handler$handlers$onU.call(_handler$handlers11, event);\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        var _handler$handlers$onC, _handler$handlers12, _handler$handlers$cha, _handler$handlers13;\n        (_handler$handlers$onC = (_handler$handlers12 = handler.handlers).onChange) === null || _handler$handlers$onC === void 0 ? void 0 : _handler$handlers$onC.call(_handler$handlers12, (_handler$handlers$cha = (_handler$handlers13 = handler.handlers).changeEventCalculator) === null || _handler$handlers$cha === void 0 ? void 0 : _handler$handlers$cha.call(_handler$handlers13, event, lastUpdateEvent[handler.handlers.handlerTag]));\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    var oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      var nativeEvent = {\n        nativeEvent: event\n      };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\nexport function startListening() {\n  stopListening();\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerEvent', onGestureHandlerEvent);\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerStateChange', onGestureHandlerEvent);\n}\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}","map":{"version":3,"names":["State","TouchEventType","findHandler","findOldGestureHandler","GestureStateManager","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","gestureStateManagers","Map","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","_handler$handlers7","_handler$handlers7$on","_handler$handlers8","_handler$handlers8$on","_handler$handlers9","_handler$handlers9$on","_handler$handlers10","_handler$handlers10$o","handler","handlerTag","UNDETERMINED","state","BEGAN","_handler$handlers$onB","_handler$handlers","handlers","onBegin","call","ACTIVE","_handler$handlers$onS","_handler$handlers2","onStart","END","_handler$handlers$onF","_handler$handlers4","_handler$handlers$onE","_handler$handlers3","onEnd","onFinalize","undefined","FAILED","CANCELLED","_handler$handlers$onF2","_handler$handlers6","_handler$handlers$onE2","_handler$handlers5","delete","has","set","create","manager","get","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","_handler$handlers$onU","_handler$handlers11","onUpdate","onChange","changeEventCalculator","_handler$handlers$onC","_handler$handlers12","_handler$handlers$cha","_handler$handlers13","oldHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"sources":["C:\\alt\\projects\\school\\3035\\QueryLake\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\eventReceiver.ts"],"sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null =\n  null;\n\nconst gestureStateManagers: Map<number, GestureStateManagerType> = new Map<\n  number,\n  GestureStateManagerType\n>();\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(\n          event.handlerTag,\n          GestureStateManager.create(event.handlerTag)\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const manager = gestureStateManagers.get(event.handlerTag)!;\n\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}