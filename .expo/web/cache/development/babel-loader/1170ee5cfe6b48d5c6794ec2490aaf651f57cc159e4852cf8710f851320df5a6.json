{"ast":null,"code":"import { runOnUIImmediately } from \"../threads\";\nvar _worklet_1814162711565_init_data = {\n  code: \"function anonymous() {\\n  const frameCallbackRegistry = {\\n    frameCallbackRegistry: new Map(),\\n    activeFrameCallbacks: new Set(),\\n    previousFrameTimestamp: null,\\n    nextCallId: 0,\\n    runCallbacks: function (callId) {\\n      var _this = this;\\n      const loop = function (timestamp) {\\n        if (callId !== _this.nextCallId) {\\n          return;\\n        }\\n        if (_this.previousFrameTimestamp === null) {\\n          _this.previousFrameTimestamp = timestamp;\\n        }\\n        const delta = timestamp - _this.previousFrameTimestamp;\\n        _this.activeFrameCallbacks.forEach(function (callbackId) {\\n          const callbackDetails = _this.frameCallbackRegistry.get(callbackId);\\n          const {\\n            startTime: startTime\\n          } = callbackDetails;\\n          if (startTime === null) {\\n            callbackDetails.startTime = timestamp;\\n            callbackDetails.callback({\\n              timestamp: timestamp,\\n              timeSincePreviousFrame: null,\\n              timeSinceFirstFrame: 0\\n            });\\n          } else {\\n            callbackDetails.callback({\\n              timestamp: timestamp,\\n              timeSincePreviousFrame: delta,\\n              timeSinceFirstFrame: timestamp - startTime\\n            });\\n          }\\n        });\\n        if (_this.activeFrameCallbacks.size > 0) {\\n          _this.previousFrameTimestamp = timestamp;\\n          requestAnimationFrame(loop);\\n        } else {\\n          _this.previousFrameTimestamp = null;\\n        }\\n      };\\n      if (this.activeFrameCallbacks.size === 1 && callId === this.nextCallId) {\\n        requestAnimationFrame(loop);\\n      }\\n    },\\n    registerFrameCallback: function (callback, callbackId) {\\n      this.frameCallbackRegistry.set(callbackId, {\\n        callback: callback,\\n        startTime: null\\n      });\\n    },\\n    unregisterFrameCallback: function (callbackId) {\\n      this.manageStateFrameCallback(callbackId, false);\\n      this.frameCallbackRegistry.delete(callbackId);\\n    },\\n    manageStateFrameCallback: function (callbackId, state) {\\n      if (callbackId === -1) {\\n        return;\\n      }\\n      if (state) {\\n        this.activeFrameCallbacks.add(callbackId);\\n        this.runCallbacks(this.nextCallId);\\n      } else {\\n        const callback = this.frameCallbackRegistry.get(callbackId);\\n        callback.startTime = null;\\n        this.activeFrameCallbacks.delete(callbackId);\\n        if (this.activeFrameCallbacks.size === 0) {\\n          this.nextCallId += 1;\\n        }\\n      }\\n    }\\n  };\\n  global._frameCallbackRegistry = frameCallbackRegistry;\\n}\",\n  location: \"C:\\\\alt\\\\projects\\\\school\\\\3035\\\\QueryLake\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\reanimated2\\\\frameCallback\\\\FrameCallbackRegistryUI.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"frameCallbackRegistry\\\",\\\"Map\\\",\\\"activeFrameCallbacks\\\",\\\"Set\\\",\\\"previousFrameTimestamp\\\",\\\"nextCallId\\\",\\\"runCallbacks\\\",\\\"callId\\\",\\\"_this\\\",\\\"loop\\\",\\\"timestamp\\\",\\\"delta\\\",\\\"forEach\\\",\\\"callbackId\\\",\\\"callbackDetails\\\",\\\"get\\\",\\\"startTime\\\",\\\"callback\\\",\\\"timeSincePreviousFrame\\\",\\\"timeSinceFirstFrame\\\",\\\"size\\\",\\\"requestAnimationFrame\\\",\\\"registerFrameCallback\\\",\\\"set\\\",\\\"unregisterFrameCallback\\\",\\\"manageStateFrameCallback\\\",\\\"delete\\\",\\\"state\\\",\\\"add\\\",\\\"global\\\",\\\"_frameCallbackRegistry\\\"],\\\"sources\\\":[\\\"C:/alt/projects/school/3035/QueryLake/node_modules/react-native-reanimated/lib/module/reanimated2/frameCallback/FrameCallbackRegistryUI.js\\\"],\\\"mappings\\\":\\\"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\\\"}\"\n};\nexport var prepareUIRegistry = runOnUIImmediately(function () {\n  var _e = [new global.Error(), 1, -27];\n  var _f = function _f() {\n    var frameCallbackRegistry = {\n      frameCallbackRegistry: new Map(),\n      activeFrameCallbacks: new Set(),\n      previousFrameTimestamp: null,\n      nextCallId: 0,\n      runCallbacks: function runCallbacks(callId) {\n        var _this = this;\n        var loop = function loop(timestamp) {\n          if (callId !== _this.nextCallId) {\n            return;\n          }\n          if (_this.previousFrameTimestamp === null) {\n            _this.previousFrameTimestamp = timestamp;\n          }\n          var delta = timestamp - _this.previousFrameTimestamp;\n          _this.activeFrameCallbacks.forEach(function (callbackId) {\n            var callbackDetails = _this.frameCallbackRegistry.get(callbackId);\n            var startTime = callbackDetails.startTime;\n            if (startTime === null) {\n              callbackDetails.startTime = timestamp;\n              callbackDetails.callback({\n                timestamp: timestamp,\n                timeSincePreviousFrame: null,\n                timeSinceFirstFrame: 0\n              });\n            } else {\n              callbackDetails.callback({\n                timestamp: timestamp,\n                timeSincePreviousFrame: delta,\n                timeSinceFirstFrame: timestamp - startTime\n              });\n            }\n          });\n          if (_this.activeFrameCallbacks.size > 0) {\n            _this.previousFrameTimestamp = timestamp;\n            requestAnimationFrame(loop);\n          } else {\n            _this.previousFrameTimestamp = null;\n          }\n        };\n        if (this.activeFrameCallbacks.size === 1 && callId === this.nextCallId) {\n          requestAnimationFrame(loop);\n        }\n      },\n      registerFrameCallback: function registerFrameCallback(callback, callbackId) {\n        this.frameCallbackRegistry.set(callbackId, {\n          callback: callback,\n          startTime: null\n        });\n      },\n      unregisterFrameCallback: function unregisterFrameCallback(callbackId) {\n        this.manageStateFrameCallback(callbackId, false);\n        this.frameCallbackRegistry.delete(callbackId);\n      },\n      manageStateFrameCallback: function manageStateFrameCallback(callbackId, state) {\n        if (callbackId === -1) {\n          return;\n        }\n        if (state) {\n          this.activeFrameCallbacks.add(callbackId);\n          this.runCallbacks(this.nextCallId);\n        } else {\n          var callback = this.frameCallbackRegistry.get(callbackId);\n          callback.startTime = null;\n          this.activeFrameCallbacks.delete(callbackId);\n          if (this.activeFrameCallbacks.size === 0) {\n            this.nextCallId += 1;\n          }\n        }\n      }\n    };\n    global._frameCallbackRegistry = frameCallbackRegistry;\n  };\n  _f._closure = {};\n  _f.__initData = _worklet_1814162711565_init_data;\n  _f.__workletHash = 1814162711565;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}());","map":{"version":3,"names":["runOnUIImmediately","_worklet_1814162711565_init_data","code","location","sourceMap","prepareUIRegistry","_e","global","Error","_f","frameCallbackRegistry","Map","activeFrameCallbacks","Set","previousFrameTimestamp","nextCallId","runCallbacks","callId","_this","loop","timestamp","delta","forEach","callbackId","callbackDetails","get","startTime","callback","timeSincePreviousFrame","timeSinceFirstFrame","size","requestAnimationFrame","registerFrameCallback","set","unregisterFrameCallback","manageStateFrameCallback","delete","state","add","_frameCallbackRegistry","_closure","__initData","__workletHash","__stackDetails","__version"],"sources":["C:\\alt\\projects\\school\\3035\\QueryLake\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\frameCallback\\FrameCallbackRegistryUI.ts"],"sourcesContent":["import { runOnUIImmediately } from '../threads';\n\ntype CallbackDetails = {\n  callback: (frameInfo: FrameInfo) => void;\n  startTime: number | null;\n};\n\nexport type FrameInfo = {\n  timestamp: number;\n  timeSincePreviousFrame: number | null;\n  timeSinceFirstFrame: number;\n};\n\nexport interface FrameCallbackRegistryUI {\n  frameCallbackRegistry: Map<number, CallbackDetails>;\n  activeFrameCallbacks: Set<number>;\n  previousFrameTimestamp: number | null;\n  runCallbacks: (callId: number) => void;\n  nextCallId: number;\n  registerFrameCallback: (\n    callback: (frameInfo: FrameInfo) => void,\n    callbackId: number\n  ) => void;\n  unregisterFrameCallback: (callbackId: number) => void;\n  manageStateFrameCallback: (callbackId: number, state: boolean) => void;\n}\n\nexport const prepareUIRegistry = runOnUIImmediately(() => {\n  'worklet';\n\n  const frameCallbackRegistry: FrameCallbackRegistryUI = {\n    frameCallbackRegistry: new Map<number, CallbackDetails>(),\n    activeFrameCallbacks: new Set<number>(),\n    previousFrameTimestamp: null,\n    nextCallId: 0,\n\n    runCallbacks(callId) {\n      const loop = (timestamp: number) => {\n        if (callId !== this.nextCallId) {\n          return;\n        }\n        if (this.previousFrameTimestamp === null) {\n          this.previousFrameTimestamp = timestamp;\n        }\n\n        const delta = timestamp - this.previousFrameTimestamp;\n\n        this.activeFrameCallbacks.forEach((callbackId: number) => {\n          const callbackDetails = this.frameCallbackRegistry.get(callbackId)!;\n\n          const { startTime } = callbackDetails;\n\n          if (startTime === null) {\n            // First frame\n            callbackDetails.startTime = timestamp;\n\n            callbackDetails.callback({\n              timestamp,\n              timeSincePreviousFrame: null,\n              timeSinceFirstFrame: 0,\n            });\n          } else {\n            // Next frame\n            callbackDetails.callback({\n              timestamp,\n              timeSincePreviousFrame: delta,\n              timeSinceFirstFrame: timestamp - startTime,\n            });\n          }\n        });\n\n        if (this.activeFrameCallbacks.size > 0) {\n          this.previousFrameTimestamp = timestamp;\n          requestAnimationFrame(loop);\n        } else {\n          this.previousFrameTimestamp = null;\n        }\n      };\n\n      // runCallback() should only be called after registering a callback,\n      // so if there is only one active callback, then it means that there were\n      // zero previously and the loop isn't running yet.\n      if (this.activeFrameCallbacks.size === 1 && callId === this.nextCallId) {\n        requestAnimationFrame(loop);\n      }\n    },\n\n    registerFrameCallback(\n      callback: (frameInfo: FrameInfo) => void,\n      callbackId: number\n    ) {\n      this.frameCallbackRegistry.set(callbackId, {\n        callback: callback,\n        startTime: null,\n      });\n    },\n\n    unregisterFrameCallback(callbackId: number) {\n      this.manageStateFrameCallback(callbackId, false);\n      this.frameCallbackRegistry.delete(callbackId);\n    },\n\n    manageStateFrameCallback(callbackId: number, state: boolean) {\n      if (callbackId === -1) {\n        return;\n      }\n      if (state) {\n        this.activeFrameCallbacks.add(callbackId);\n        this.runCallbacks(this.nextCallId);\n      } else {\n        const callback = this.frameCallbackRegistry.get(callbackId)!;\n        callback.startTime = null;\n\n        this.activeFrameCallbacks.delete(callbackId);\n        if (this.activeFrameCallbacks.size === 0) {\n          this.nextCallId += 1;\n        }\n      }\n    },\n  };\n\n  global._frameCallbackRegistry = frameCallbackRegistry;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}