{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport NativeReanimatedModule from \"./NativeReanimated\";\nimport { SensorType } from \"./commonTypes\";\nimport { makeMutable } from \"./mutables\";\nfunction initSensorData(sensorType) {\n  if (sensorType === SensorType.ROTATION) {\n    return makeMutable({\n      qw: 0,\n      qx: 0,\n      qy: 0,\n      qz: 0,\n      yaw: 0,\n      pitch: 0,\n      roll: 0,\n      interfaceOrientation: 0\n    });\n  } else {\n    return makeMutable({\n      x: 0,\n      y: 0,\n      z: 0,\n      interfaceOrientation: 0\n    });\n  }\n}\nvar Sensor = function () {\n  function Sensor(sensorType, config) {\n    _classCallCheck(this, Sensor);\n    _defineProperty(this, \"listenersNumber\", 0);\n    _defineProperty(this, \"sensorId\", null);\n    _defineProperty(this, \"sensorType\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    _defineProperty(this, \"config\", void 0);\n    this.sensorType = sensorType;\n    this.config = config;\n    this.data = initSensorData(sensorType);\n  }\n  _createClass(Sensor, [{\n    key: \"register\",\n    value: function register(eventHandler) {\n      var config = this.config;\n      var sensorType = this.sensorType;\n      this.sensorId = NativeReanimatedModule.registerSensor(sensorType, config.interval === 'auto' ? -1 : config.interval, config.iosReferenceFrame, eventHandler);\n      return this.sensorId !== -1;\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return this.sensorId !== -1 && this.sensorId !== null;\n    }\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      return this.sensorId !== -1;\n    }\n  }, {\n    key: \"getSharedValue\",\n    value: function getSharedValue() {\n      return this.data;\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      if (this.sensorId !== null && this.sensorId !== -1) {\n        NativeReanimatedModule.unregisterSensor(this.sensorId);\n      }\n      this.sensorId = null;\n    }\n  }]);\n  return Sensor;\n}();\nexport { Sensor as default };","map":{"version":3,"names":["NativeReanimatedModule","SensorType","makeMutable","initSensorData","sensorType","ROTATION","qw","qx","qy","qz","yaw","pitch","roll","interfaceOrientation","x","y","z","Sensor","config","_classCallCheck","_defineProperty","data","_createClass","key","value","register","eventHandler","sensorId","registerSensor","interval","iosReferenceFrame","isRunning","isAvailable","getSharedValue","unregister","unregisterSensor","default"],"sources":["C:\\alt\\projects\\school\\3035\\QueryLake\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\Sensor.ts"],"sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nimport {\n  SensorType,\n  SensorConfig,\n  SharedValue,\n  Value3D,\n  ValueRotation,\n  ShareableRef,\n} from './commonTypes';\nimport { makeMutable } from './mutables';\n\nfunction initSensorData(\n  sensorType: SensorType\n): SharedValue<Value3D | ValueRotation> {\n  if (sensorType === SensorType.ROTATION) {\n    return makeMutable<Value3D | ValueRotation>({\n      qw: 0,\n      qx: 0,\n      qy: 0,\n      qz: 0,\n      yaw: 0,\n      pitch: 0,\n      roll: 0,\n      interfaceOrientation: 0,\n    });\n  } else {\n    return makeMutable<Value3D | ValueRotation>({\n      x: 0,\n      y: 0,\n      z: 0,\n      interfaceOrientation: 0,\n    });\n  }\n}\n\nexport default class Sensor<T> {\n  public listenersNumber = 0;\n  private sensorId: number | null = null;\n  private sensorType: SensorType;\n  private data: SharedValue<Value3D | ValueRotation>;\n  private config: SensorConfig;\n\n  constructor(sensorType: SensorType, config: SensorConfig) {\n    this.sensorType = sensorType;\n    this.config = config;\n    this.data = initSensorData(sensorType);\n  }\n\n  register(\n    eventHandler: ShareableRef<T> | ((data: Value3D | ValueRotation) => void)\n  ) {\n    const config = this.config;\n    const sensorType = this.sensorType;\n    this.sensorId = NativeReanimatedModule.registerSensor(\n      sensorType,\n      config.interval === 'auto' ? -1 : config.interval,\n      config.iosReferenceFrame,\n      eventHandler\n    );\n    return this.sensorId !== -1;\n  }\n\n  isRunning() {\n    return this.sensorId !== -1 && this.sensorId !== null;\n  }\n\n  isAvailable() {\n    return this.sensorId !== -1;\n  }\n\n  getSharedValue() {\n    return this.data;\n  }\n\n  unregister() {\n    if (this.sensorId !== null && this.sensorId !== -1) {\n      NativeReanimatedModule.unregisterSensor(this.sensorId);\n    }\n    this.sensorId = null;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,sBAAsB;AAC7B,SACEC,UAAU;AAOZ,SAASC,WAAW;AAEpB,SAASC,cAAcA,CACrBC,UAAsB,EACgB;EACtC,IAAIA,UAAU,KAAKH,UAAU,CAACI,QAAQ,EAAE;IACtC,OAAOH,WAAW,CAA0B;MAC1CI,EAAE,EAAE,CAAC;MACLC,EAAE,EAAE,CAAC;MACLC,EAAE,EAAE,CAAC;MACLC,EAAE,EAAE,CAAC;MACLC,GAAG,EAAE,CAAC;MACNC,KAAK,EAAE,CAAC;MACRC,IAAI,EAAE,CAAC;MACPC,oBAAoB,EAAE;IACxB,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOX,WAAW,CAA0B;MAC1CY,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJH,oBAAoB,EAAE;IACxB,CAAC,CAAC;EACJ;AACF;AAAA,IAEqBI,MAAM;EAOzB,SAAAA,OAAYb,UAAsB,EAAEc,MAAoB,EAAE;IAAAC,eAAA,OAAAF,MAAA;IAAAG,eAAA,0BANjC,CAAC;IAAAA,eAAA,mBACQ,IAAI;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAMpC,IAAI,CAAChB,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACc,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACG,IAAI,GAAGlB,cAAc,CAACC,UAAU,CAAC;EACxC;EAAAkB,YAAA,CAAAL,MAAA;IAAAM,GAAA;IAAAC,KAAA,EAEA,SAAAC,SACEC,YAAyE,EACzE;MACA,IAAMR,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1B,IAAMd,UAAU,GAAG,IAAI,CAACA,UAAU;MAClC,IAAI,CAACuB,QAAQ,GAAG3B,sBAAsB,CAAC4B,cAAc,CACnDxB,UAAU,EACVc,MAAM,CAACW,QAAQ,KAAK,MAAM,GAAG,CAAC,CAAC,GAAGX,MAAM,CAACW,QAAQ,EACjDX,MAAM,CAACY,iBAAiB,EACxBJ,YAAY,CACb;MACD,OAAO,IAAI,CAACC,QAAQ,KAAK,CAAC,CAAC;IAC7B;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAEA,SAAAO,UAAA,EAAY;MACV,OAAO,IAAI,CAACJ,QAAQ,KAAK,CAAC,CAAC,IAAI,IAAI,CAACA,QAAQ,KAAK,IAAI;IACvD;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAEA,SAAAQ,YAAA,EAAc;MACZ,OAAO,IAAI,CAACL,QAAQ,KAAK,CAAC,CAAC;IAC7B;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAEA,SAAAS,eAAA,EAAiB;MACf,OAAO,IAAI,CAACZ,IAAI;IAClB;EAAA;IAAAE,GAAA;IAAAC,KAAA,EAEA,SAAAU,WAAA,EAAa;MACX,IAAI,IAAI,CAACP,QAAQ,KAAK,IAAI,IAAI,IAAI,CAACA,QAAQ,KAAK,CAAC,CAAC,EAAE;QAClD3B,sBAAsB,CAACmC,gBAAgB,CAAC,IAAI,CAACR,QAAQ,CAAC;MACxD;MACA,IAAI,CAACA,QAAQ,GAAG,IAAI;IACtB;EAAA;EAAA,OAAAV,MAAA;AAAA;AAAA,SA5CmBA,MAAM,IAAAmB,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}