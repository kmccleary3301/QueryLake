{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"enabled\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from \"../../State\";\nimport { PointerType, TouchEventType, EventTypes } from \"../interfaces\";\nimport GestureHandlerOrchestrator from \"../tools/GestureHandlerOrchestrator\";\nimport InteractionManager from \"../tools/InteractionManager\";\nimport PointerEventManager from \"../tools/PointerEventManager\";\nimport PointerTracker from \"../tools/PointerTracker\";\nimport TouchEventManager from \"../tools/TouchEventManager\";\nimport { isPointerInBounds } from \"../utils\";\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n    _classCallCheck(this, GestureHandler);\n    _defineProperty(this, \"lastSentState\", null);\n    _defineProperty(this, \"currentState\", State.UNDETERMINED);\n    _defineProperty(this, \"shouldCancellWhenOutside\", false);\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n    _defineProperty(this, \"enabled\", false);\n    _defineProperty(this, \"ref\", void 0);\n    _defineProperty(this, \"propsRef\", void 0);\n    _defineProperty(this, \"handlerTag\", void 0);\n    _defineProperty(this, \"config\", {\n      enabled: false\n    });\n    _defineProperty(this, \"view\", void 0);\n    _defineProperty(this, \"eventManagers\", []);\n    _defineProperty(this, \"tracker\", new PointerTracker());\n    _defineProperty(this, \"activationIndex\", 0);\n    _defineProperty(this, \"awaiting\", false);\n    _defineProperty(this, \"active\", false);\n    _defineProperty(this, \"shouldResetProgress\", false);\n    _defineProperty(this, \"pointerType\", PointerType.NONE);\n    _defineProperty(this, \"sendEvent\", function (newState, oldState) {\n      var _this$propsRef$curren = _this.propsRef.current,\n        onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n        onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n      var resultEvent = _this.transformEventData(newState, oldState);\n      if (_this.lastSentState !== newState) {\n        _this.lastSentState = newState;\n        invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n      }\n      if (_this.currentState === State.ACTIVE) {\n        resultEvent.nativeEvent.oldState = undefined;\n        invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n      }\n    });\n    this.hasCustomActivationCriteria = false;\n  }\n  _createClass(GestureHandler, [{\n    key: \"init\",\n    value: function init(ref, propsRef) {\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.currentState = State.UNDETERMINED;\n      this.setView();\n      this.addEventManager(new PointerEventManager(this.view));\n      this.addEventManager(new TouchEventManager(this.view));\n    }\n  }, {\n    key: \"setView\",\n    value: function setView() {\n      if (!this.ref) {\n        throw new Error(`Cannot find HTML Element for handler ${this.handlerTag}`);\n      }\n      this.view = findNodeHandle(this.ref);\n      this.view.style['touchAction'] = 'none';\n      this.view.style['WebkitTouchCallout'] = 'none';\n      if (!this.config.userSelect) {\n        this.view.style['webkitUserSelect'] = 'none';\n        this.view.style['userSelect'] = 'none';\n      } else {\n        this.view.style['webkitUserSelect'] = this.config.userSelect;\n        this.view.style['userSelect'] = this.config.userSelect;\n      }\n    }\n  }, {\n    key: \"addEventManager\",\n    value: function addEventManager(manager) {\n      manager.setOnPointerDown(this.onPointerDown.bind(this));\n      manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n      manager.setOnPointerUp(this.onPointerUp.bind(this));\n      manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n      manager.setOnPointerMove(this.onPointerMove.bind(this));\n      manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n      manager.setOnPointerOut(this.onPointerOut.bind(this));\n      manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n      manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n      manager.setListeners();\n      this.eventManagers.push(manager);\n    }\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {}\n  }, {\n    key: \"onReset\",\n    value: function onReset() {}\n  }, {\n    key: \"resetProgress\",\n    value: function resetProgress() {}\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.tracker.resetTracker();\n      this.onReset();\n      this.resetProgress();\n      this.eventManagers.forEach(function (manager) {\n        return manager.resetManager();\n      });\n      this.currentState = State.UNDETERMINED;\n    }\n  }, {\n    key: \"moveToState\",\n    value: function moveToState(newState, sendIfDisabled) {\n      if (this.currentState === newState) {\n        return;\n      }\n      var oldState = this.currentState;\n      this.currentState = newState;\n      if (this.tracker.getTrackedPointersCount() > 0 && this.config.needsPointerData && this.isFinished()) {\n        this.cancelTouches();\n      }\n      GestureHandlerOrchestrator.getInstance().onHandlerStateChange(this, newState, oldState, sendIfDisabled);\n      this.onStateChange(newState, oldState);\n    }\n  }, {\n    key: \"onStateChange\",\n    value: function onStateChange(_newState, _oldState) {}\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      if (!this.checkHitSlop()) {\n        return;\n      }\n      if (this.currentState === State.UNDETERMINED) {\n        this.moveToState(State.BEGAN);\n      }\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(sendIfDisabled) {\n      if (this.currentState === State.ACTIVE || this.currentState === State.BEGAN) {\n        this.moveToState(State.FAILED, sendIfDisabled);\n        this.view.style.cursor = 'auto';\n      }\n      this.resetProgress();\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(sendIfDisabled) {\n      if (this.currentState === State.ACTIVE || this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN) {\n        this.onCancel();\n        this.moveToState(State.CANCELLED, sendIfDisabled);\n        this.view.style.cursor = 'auto';\n      }\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      var _force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN) {\n        this.moveToState(State.ACTIVE);\n        this.view.style.cursor = 'grab';\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this.currentState === State.BEGAN || this.currentState === State.ACTIVE) {\n        this.moveToState(State.END);\n        this.view.style.cursor = 'auto';\n      }\n      this.resetProgress();\n    }\n  }, {\n    key: \"isAwaiting\",\n    value: function isAwaiting() {\n      return this.awaiting;\n    }\n  }, {\n    key: \"setAwaiting\",\n    value: function setAwaiting(value) {\n      this.awaiting = value;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }, {\n    key: \"setActive\",\n    value: function setActive(value) {\n      this.active = value;\n    }\n  }, {\n    key: \"getShouldResetProgress\",\n    value: function getShouldResetProgress() {\n      return this.shouldResetProgress;\n    }\n  }, {\n    key: \"setShouldResetProgress\",\n    value: function setShouldResetProgress(value) {\n      this.shouldResetProgress = value;\n    }\n  }, {\n    key: \"getActivationIndex\",\n    value: function getActivationIndex() {\n      return this.activationIndex;\n    }\n  }, {\n    key: \"setActivationIndex\",\n    value: function setActivationIndex(value) {\n      this.activationIndex = value;\n    }\n  }, {\n    key: \"shouldWaitForHandlerFailure\",\n    value: function shouldWaitForHandlerFailure(handler) {\n      if (handler === this) {\n        return false;\n      }\n      return InteractionManager.getInstance().shouldWaitForHandlerFailure(this, handler);\n    }\n  }, {\n    key: \"shouldRequireToWaitForFailure\",\n    value: function shouldRequireToWaitForFailure(handler) {\n      if (handler === this) {\n        return false;\n      }\n      return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(this, handler);\n    }\n  }, {\n    key: \"shouldRecognizeSimultaneously\",\n    value: function shouldRecognizeSimultaneously(handler) {\n      if (handler === this) {\n        return true;\n      }\n      return InteractionManager.getInstance().shouldRecognizeSimultaneously(this, handler);\n    }\n  }, {\n    key: \"shouldBeCancelledByOther\",\n    value: function shouldBeCancelledByOther(handler) {\n      if (handler === this) {\n        return false;\n      }\n      return InteractionManager.getInstance().shouldHandlerBeCancelledBy(this, handler);\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(event) {\n      GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n      this.pointerType = event.pointerType;\n      if (this.pointerType === PointerType.TOUCH) {\n        GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n      }\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerAdd\",\n    value: function onPointerAdd(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerRemove\",\n    value: function onPointerRemove(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      this.tryToSendMoveEvent(false);\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerOut\",\n    value: function onPointerOut(event) {\n      if (this.shouldCancellWhenOutside) {\n        switch (this.currentState) {\n          case State.ACTIVE:\n            this.cancel();\n            break;\n          case State.BEGAN:\n            this.fail();\n            break;\n        }\n        return;\n      }\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerEnter\",\n    value: function onPointerEnter(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(event) {\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n      this.cancel();\n      this.reset();\n    }\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(event) {\n      this.tryToSendMoveEvent(true);\n      if (this.config.needsPointerData) {\n        this.sendTouchEvent(event);\n      }\n    }\n  }, {\n    key: \"tryToSendMoveEvent\",\n    value: function tryToSendMoveEvent(out) {\n      if (this.enabled && this.active && (!out || out && !this.shouldCancellWhenOutside)) {\n        this.sendEvent(this.currentState, this.currentState);\n      }\n    }\n  }, {\n    key: \"sendTouchEvent\",\n    value: function sendTouchEvent(event) {\n      if (!this.enabled) {\n        return;\n      }\n      var onGestureHandlerEvent = this.propsRef.current.onGestureHandlerEvent;\n      var touchEvent = this.transformTouchEvent(event);\n      if (touchEvent) {\n        invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n      }\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(newState, oldState) {\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: this.tracker.getTrackedPointersCount(),\n          state: newState,\n          pointerInside: isPointerInBounds(this.view, {\n            x: this.tracker.getLastAvgX(),\n            y: this.tracker.getLastAvgY()\n          })\n        }, this.transformNativeEvent()), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: newState !== oldState ? oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformTouchEvent\",\n    value: function transformTouchEvent(event) {\n      var _this2 = this;\n      var _event$touchEventType;\n      var rect = this.view.getBoundingClientRect();\n      var all = [];\n      var changed = [];\n      var trackerData = this.tracker.getData();\n      if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n        return;\n      }\n      trackerData.forEach(function (element, key) {\n        var id = _this2.tracker.getMappedTouchEventId(key);\n        all.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n      });\n      if (event.eventType !== EventTypes.CANCEL) {\n        changed.push({\n          id: this.tracker.getMappedTouchEventId(event.pointerId),\n          x: event.x - rect.left,\n          y: event.y - rect.top,\n          absoluteX: event.x,\n          absoluteY: event.y\n        });\n      } else {\n        trackerData.forEach(function (element, key) {\n          var id = _this2.tracker.getMappedTouchEventId(key);\n          changed.push({\n            id: id,\n            x: element.lastX - rect.left,\n            y: element.lastY - rect.top,\n            absoluteX: element.lastX,\n            absoluteY: element.lastY\n          });\n        });\n      }\n      var eventType = TouchEventType.UNDETERMINED;\n      switch (event.eventType) {\n        case EventTypes.DOWN:\n        case EventTypes.ADDITIONAL_POINTER_DOWN:\n          eventType = TouchEventType.DOWN;\n          break;\n        case EventTypes.UP:\n        case EventTypes.ADDITIONAL_POINTER_UP:\n          eventType = TouchEventType.UP;\n          break;\n        case EventTypes.MOVE:\n          eventType = TouchEventType.MOVE;\n          break;\n        case EventTypes.CANCEL:\n          eventType = TouchEventType.CANCELLED;\n          break;\n      }\n      var numberOfTouches = all.length;\n      if (event.eventType === EventTypes.UP || event.eventType === EventTypes.ADDITIONAL_POINTER_UP) {\n        --numberOfTouches;\n      }\n      return {\n        nativeEvent: {\n          handlerTag: this.handlerTag,\n          state: this.currentState,\n          eventType: (_event$touchEventType = event.touchEventType) !== null && _event$touchEventType !== void 0 ? _event$touchEventType : eventType,\n          changedTouches: changed,\n          allTouches: all,\n          numberOfTouches: numberOfTouches\n        },\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"cancelTouches\",\n    value: function cancelTouches() {\n      var _this3 = this;\n      var rect = this.view.getBoundingClientRect();\n      var all = [];\n      var changed = [];\n      var trackerData = this.tracker.getData();\n      if (trackerData.size === 0) {\n        return;\n      }\n      trackerData.forEach(function (element, key) {\n        var id = _this3.tracker.getMappedTouchEventId(key);\n        all.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n        changed.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY\n        });\n      });\n      var cancelEvent = {\n        nativeEvent: {\n          handlerTag: this.handlerTag,\n          state: this.currentState,\n          eventType: TouchEventType.CANCELLED,\n          changedTouches: changed,\n          allTouches: all,\n          numberOfTouches: all.length\n        },\n        timeStamp: Date.now()\n      };\n      var onGestureHandlerEvent = this.propsRef.current.onGestureHandlerEvent;\n      invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent() {\n      return {};\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n        enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n        props = _objectWithoutProperties(_ref, _excluded);\n      this.config = _objectSpread({\n        enabled: enabled\n      }, props);\n      this.enabled = enabled;\n      if (this.config.shouldCancelWhenOutside !== undefined) {\n        this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n      }\n      this.validateHitSlops();\n      if (this.enabled) {\n        return;\n      }\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.fail(true);\n          break;\n        case State.UNDETERMINED:\n          GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(this);\n          break;\n        default:\n          this.cancel(true);\n          break;\n      }\n    }\n  }, {\n    key: \"checkCustomActivationCriteria\",\n    value: function checkCustomActivationCriteria(criterias) {\n      for (var key in this.config) {\n        if (criterias.indexOf(key) >= 0) {\n          this.hasCustomActivationCriteria = true;\n        }\n      }\n    }\n  }, {\n    key: \"validateHitSlops\",\n    value: function validateHitSlops() {\n      if (!this.config.hitSlop) {\n        return;\n      }\n      if (this.config.hitSlop.left !== undefined && this.config.hitSlop.right !== undefined && this.config.hitSlop.width !== undefined) {\n        throw new Error('HitSlop Error: Cannot define left, right and width at the same time');\n      }\n      if (this.config.hitSlop.width !== undefined && this.config.hitSlop.left === undefined && this.config.hitSlop.right === undefined) {\n        throw new Error('HitSlop Error: When width is defined, either left or right has to be defined');\n      }\n      if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top !== undefined && this.config.hitSlop.bottom !== undefined) {\n        throw new Error('HitSlop Error: Cannot define top, bottom and height at the same time');\n      }\n      if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top === undefined && this.config.hitSlop.bottom === undefined) {\n        throw new Error('HitSlop Error: When height is defined, either top or bottom has to be defined');\n      }\n    }\n  }, {\n    key: \"checkHitSlop\",\n    value: function checkHitSlop() {\n      if (!this.config.hitSlop) {\n        return true;\n      }\n      var width = this.view.getBoundingClientRect().width;\n      var height = this.view.getBoundingClientRect().height;\n      var left = 0;\n      var top = 0;\n      var right = width;\n      var bottom = height;\n      if (this.config.hitSlop.horizontal !== undefined) {\n        left -= this.config.hitSlop.horizontal;\n        right += this.config.hitSlop.horizontal;\n      }\n      if (this.config.hitSlop.vertical !== undefined) {\n        top -= this.config.hitSlop.vertical;\n        bottom += this.config.hitSlop.vertical;\n      }\n      if (this.config.hitSlop.left !== undefined) {\n        left = -this.config.hitSlop.left;\n      }\n      if (this.config.hitSlop.right !== undefined) {\n        right = width + this.config.hitSlop.right;\n      }\n      if (this.config.hitSlop.top !== undefined) {\n        top = -this.config.hitSlop.top;\n      }\n      if (this.config.hitSlop.bottom !== undefined) {\n        bottom = width + this.config.hitSlop.bottom;\n      }\n      if (this.config.hitSlop.width !== undefined) {\n        if (this.config.hitSlop.left !== undefined) {\n          right = left + this.config.hitSlop.width;\n        } else if (this.config.hitSlop.right !== undefined) {\n          left = right - this.config.hitSlop.width;\n        }\n      }\n      if (this.config.hitSlop.height !== undefined) {\n        if (this.config.hitSlop.top !== undefined) {\n          bottom = top + this.config.hitSlop.height;\n        } else if (this.config.hitSlop.bottom !== undefined) {\n          top = bottom - this.config.hitSlop.height;\n        }\n      }\n      var rect = this.view.getBoundingClientRect();\n      var offsetX = this.tracker.getLastX() - rect.left;\n      var offsetY = this.tracker.getLastY() - rect.top;\n      if (offsetX >= left && offsetX <= right && offsetY >= top && offsetY <= bottom) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"isPointerInBounds\",\n    value: function isPointerInBounds(_ref2) {\n      var x = _ref2.x,\n        y = _ref2.y;\n      var rect = this.view.getBoundingClientRect();\n      return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    }\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {}\n  }, {\n    key: \"getTag\",\n    value: function getTag() {\n      return this.handlerTag;\n    }\n  }, {\n    key: \"setTag\",\n    value: function setTag(tag) {\n      this.handlerTag = tag;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"getShouldEnableGestureOnSetup\",\n    value: function getShouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getView\",\n    value: function getView() {\n      return this.view;\n    }\n  }, {\n    key: \"getEventManagers\",\n    value: function getEventManagers() {\n      return this.eventManagers;\n    }\n  }, {\n    key: \"getTracker\",\n    value: function getTracker() {\n      return this.tracker;\n    }\n  }, {\n    key: \"getTrackedPointersID\",\n    value: function getTrackedPointersID() {\n      return this.tracker.getTrackedPointersID();\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this.currentState;\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"isFinished\",\n    value: function isFinished() {\n      return this.currentState === State.END || this.currentState === State.FAILED || this.currentState === State.CANCELLED;\n    }\n  }, {\n    key: \"setShouldCancelWhenOutside\",\n    value: function setShouldCancelWhenOutside(shouldCancel) {\n      this.shouldCancellWhenOutside = shouldCancel;\n    }\n  }, {\n    key: \"getShouldCancelWhenOutside\",\n    value: function getShouldCancelWhenOutside() {\n      return this.shouldCancellWhenOutside;\n    }\n  }, {\n    key: \"getPointerType\",\n    value: function getPointerType() {\n      return this.pointerType;\n    }\n  }]);\n  return GestureHandler;\n}();\nexport { GestureHandler as default };\nfunction invokeNullableMethod(method, event) {\n  if (!method) {\n    return;\n  }\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    var handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n  var argMapping = method.__nodeConfig.argMapping;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n  for (var _ref3 of argMapping.entries()) {\n    var _ref4 = _slicedToArray(_ref3, 2);\n    var index = _ref4[0];\n    var _ref4$ = _slicedToArray(_ref4[1], 2);\n    var key = _ref4$[0];\n    var value = _ref4$[1];\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n    var nativeValue = event.nativeEvent[key];\n    if (value !== null && value !== void 0 && value.setValue) {\n      value.setValue(nativeValue);\n    } else {\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n  return;\n}","map":{"version":3,"names":["State","PointerType","TouchEventType","EventTypes","GestureHandlerOrchestrator","InteractionManager","PointerEventManager","PointerTracker","TouchEventManager","isPointerInBounds","GestureHandler","_this","_classCallCheck","_defineProperty","UNDETERMINED","enabled","NONE","newState","oldState","_this$propsRef$curren","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","resultEvent","transformEventData","lastSentState","invokeNullableMethod","currentState","ACTIVE","nativeEvent","undefined","hasCustomActivationCriteria","_createClass","key","value","init","ref","setView","addEventManager","view","Error","handlerTag","findNodeHandle","style","config","userSelect","manager","setOnPointerDown","onPointerDown","bind","setOnPointerAdd","onPointerAdd","setOnPointerUp","onPointerUp","setOnPointerRemove","onPointerRemove","setOnPointerMove","onPointerMove","setOnPointerEnter","onPointerEnter","setOnPointerOut","onPointerOut","setOnPointerCancel","onPointerCancel","setOnPointerOutOfBounds","onPointerOutOfBounds","setListeners","eventManagers","push","onCancel","onReset","resetProgress","reset","tracker","resetTracker","forEach","resetManager","moveToState","sendIfDisabled","getTrackedPointersCount","needsPointerData","isFinished","cancelTouches","getInstance","onHandlerStateChange","onStateChange","_newState","_oldState","begin","checkHitSlop","BEGAN","fail","FAILED","cursor","cancel","CANCELLED","activate","_force","arguments","length","end","END","isAwaiting","awaiting","setAwaiting","isActive","active","setActive","getShouldResetProgress","shouldResetProgress","setShouldResetProgress","getActivationIndex","activationIndex","setActivationIndex","shouldWaitForHandlerFailure","handler","shouldRequireToWaitForFailure","shouldRequireHandlerToWaitForFailure","shouldRecognizeSimultaneously","shouldBeCancelledByOther","shouldHandlerBeCancelledBy","event","recordHandlerIfNotPresent","pointerType","TOUCH","cancelMouseAndPenGestures","sendTouchEvent","tryToSendMoveEvent","shouldCancellWhenOutside","out","sendEvent","touchEvent","transformTouchEvent","_objectSpread","numberOfPointers","state","pointerInside","x","getLastAvgX","y","getLastAvgY","transformNativeEvent","target","timeStamp","Date","now","_this2","_event$touchEventType","rect","getBoundingClientRect","all","changed","trackerData","getData","size","has","pointerId","element","id","getMappedTouchEventId","lastX","left","lastY","top","absoluteX","absoluteY","eventType","CANCEL","DOWN","ADDITIONAL_POINTER_DOWN","UP","ADDITIONAL_POINTER_UP","MOVE","numberOfTouches","touchEventType","changedTouches","allTouches","_this3","cancelEvent","updateGestureConfig","_ref","_ref$enabled","props","_objectWithoutProperties","_excluded","shouldCancelWhenOutside","setShouldCancelWhenOutside","validateHitSlops","removeHandlerFromOrchestrator","checkCustomActivationCriteria","criterias","indexOf","hitSlop","right","width","height","bottom","horizontal","vertical","offsetX","getLastX","offsetY","getLastY","_ref2","resetConfig","getTag","setTag","tag","getConfig","getShouldEnableGestureOnSetup","getView","getEventManagers","getTracker","getTrackedPointersID","getState","isEnabled","shouldCancel","getShouldCancelWhenOutside","getPointerType","default","method","__getHandler","argMapping","__nodeConfig","Array","isArray","_ref3","entries","_ref4","_slicedToArray","index","_ref4$","nativeValue","setValue"],"sources":["C:\\alt\\projects\\school\\3035\\QueryLake\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\handlers\\GestureHandler.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport { findNodeHandle } from 'react-native';\nimport { State } from '../../State';\nimport {\n  Config,\n  AdaptedEvent,\n  PropsRef,\n  ResultEvent,\n  PointerData,\n  ResultTouchEvent,\n  PointerType,\n  TouchEventType,\n  EventTypes,\n} from '../interfaces';\nimport EventManager from '../tools/EventManager';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport InteractionManager from '../tools/InteractionManager';\nimport PointerEventManager from '../tools/PointerEventManager';\nimport PointerTracker, { TrackerElement } from '../tools/PointerTracker';\nimport TouchEventManager from '../tools/TouchEventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default abstract class GestureHandler {\n  private lastSentState: State | null = null;\n  protected currentState: State = State.UNDETERMINED;\n\n  protected shouldCancellWhenOutside = false;\n  protected hasCustomActivationCriteria: boolean;\n  protected enabled = false;\n\n  private ref!: number;\n  private propsRef!: React.RefObject<unknown>;\n  private handlerTag!: number;\n  protected config: Config = { enabled: false };\n  protected view!: HTMLElement;\n\n  protected eventManagers: EventManager[] = [];\n  protected tracker: PointerTracker = new PointerTracker();\n\n  // Orchestrator properties\n  protected activationIndex = 0;\n  protected awaiting = false;\n  protected active = false;\n  protected shouldResetProgress = false;\n  protected pointerType: PointerType = PointerType.NONE;\n\n  public constructor() {\n    this.hasCustomActivationCriteria = false;\n  }\n\n  //\n  // Initializing handler\n  //\n\n  protected init(ref: number, propsRef: React.RefObject<unknown>) {\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.currentState = State.UNDETERMINED;\n\n    this.setView();\n    this.addEventManager(new PointerEventManager(this.view));\n    this.addEventManager(new TouchEventManager(this.view));\n  }\n\n  private setView() {\n    if (!this.ref) {\n      throw new Error(\n        `Cannot find HTML Element for handler ${this.handlerTag}`\n      );\n    }\n\n    this.view = findNodeHandle(this.ref) as unknown as HTMLElement;\n    this.view.style['touchAction'] = 'none';\n    //@ts-ignore This one disables default events on Safari\n    this.view.style['WebkitTouchCallout'] = 'none';\n\n    if (!this.config.userSelect) {\n      this.view.style['webkitUserSelect'] = 'none';\n      this.view.style['userSelect'] = 'none';\n    } else {\n      this.view.style['webkitUserSelect'] = this.config.userSelect;\n      this.view.style['userSelect'] = this.config.userSelect;\n    }\n  }\n\n  private addEventManager(manager: EventManager): void {\n    manager.setOnPointerDown(this.onPointerDown.bind(this));\n    manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n    manager.setOnPointerUp(this.onPointerUp.bind(this));\n    manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n    manager.setOnPointerMove(this.onPointerMove.bind(this));\n    manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n    manager.setOnPointerOut(this.onPointerOut.bind(this));\n    manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n    manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n    manager.setListeners();\n\n    this.eventManagers.push(manager);\n  }\n\n  //\n  // Resetting handler\n  //\n\n  protected onCancel(): void {}\n  protected onReset(): void {}\n  protected resetProgress(): void {}\n\n  public reset(): void {\n    this.tracker.resetTracker();\n    this.onReset();\n    this.resetProgress();\n    this.eventManagers.forEach((manager: EventManager) =>\n      manager.resetManager()\n    );\n    this.currentState = State.UNDETERMINED;\n  }\n\n  //\n  // State logic\n  //\n\n  public moveToState(newState: State, sendIfDisabled?: boolean) {\n    if (this.currentState === newState) {\n      return;\n    }\n\n    const oldState = this.currentState;\n    this.currentState = newState;\n\n    if (\n      this.tracker.getTrackedPointersCount() > 0 &&\n      this.config.needsPointerData &&\n      this.isFinished()\n    ) {\n      this.cancelTouches();\n    }\n\n    GestureHandlerOrchestrator.getInstance().onHandlerStateChange(\n      this,\n      newState,\n      oldState,\n      sendIfDisabled\n    );\n\n    this.onStateChange(newState, oldState);\n  }\n\n  protected onStateChange(_newState: State, _oldState: State): void {}\n\n  public begin(): void {\n    if (!this.checkHitSlop()) {\n      return;\n    }\n\n    if (this.currentState === State.UNDETERMINED) {\n      this.moveToState(State.BEGAN);\n    }\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send fail event\n   */\n  public fail(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.BEGAN\n    ) {\n      this.moveToState(State.FAILED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n\n    this.resetProgress();\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send cancel event\n   */\n  public cancel(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.onCancel();\n      this.moveToState(State.CANCELLED, sendIfDisabled);\n      this.view.style.cursor = 'auto';\n    }\n  }\n\n  public activate(_force = false) {\n    if (\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.moveToState(State.ACTIVE);\n      this.view.style.cursor = 'grab';\n    }\n  }\n\n  public end() {\n    if (\n      this.currentState === State.BEGAN ||\n      this.currentState === State.ACTIVE\n    ) {\n      this.moveToState(State.END);\n      this.view.style.cursor = 'auto';\n    }\n\n    this.resetProgress();\n  }\n\n  //\n  // Methods for orchestrator\n  //\n\n  public isAwaiting(): boolean {\n    return this.awaiting;\n  }\n  public setAwaiting(value: boolean): void {\n    this.awaiting = value;\n  }\n\n  public isActive(): boolean {\n    return this.active;\n  }\n  public setActive(value: boolean): void {\n    this.active = value;\n  }\n\n  public getShouldResetProgress(): boolean {\n    return this.shouldResetProgress;\n  }\n  public setShouldResetProgress(value: boolean): void {\n    this.shouldResetProgress = value;\n  }\n\n  public getActivationIndex(): number {\n    return this.activationIndex;\n  }\n  public setActivationIndex(value: number): void {\n    this.activationIndex = value;\n  }\n\n  public shouldWaitForHandlerFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldWaitForHandlerFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRequireToWaitForFailure(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRecognizeSimultaneously(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return true;\n    }\n\n    return InteractionManager.getInstance().shouldRecognizeSimultaneously(\n      this,\n      handler\n    );\n  }\n\n  public shouldBeCancelledByOther(handler: GestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldHandlerBeCancelledBy(\n      this,\n      handler\n    );\n  }\n\n  //\n  // Event actions\n  //\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n    this.pointerType = event.pointerType;\n\n    if (this.pointerType === PointerType.TOUCH) {\n      GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n    }\n\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Adding another pointer to existing ones\n  protected onPointerAdd(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerUp(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  // Removing pointer, when there is more than one pointers\n  protected onPointerRemove(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(false);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerOut(event: AdaptedEvent): void {\n    if (this.shouldCancellWhenOutside) {\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.cancel();\n          break;\n        case State.BEGAN:\n          this.fail();\n          break;\n      }\n      return;\n    }\n\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerEnter(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  protected onPointerCancel(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n\n    this.cancel();\n    this.reset();\n  }\n  protected onPointerOutOfBounds(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(true);\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  private tryToSendMoveEvent(out: boolean): void {\n    if (\n      this.enabled &&\n      this.active &&\n      (!out || (out && !this.shouldCancellWhenOutside))\n    ) {\n      this.sendEvent(this.currentState, this.currentState);\n    }\n  }\n\n  public sendTouchEvent(event: AdaptedEvent): void {\n    if (!this.enabled) {\n      return;\n    }\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    const touchEvent: ResultTouchEvent | undefined =\n      this.transformTouchEvent(event);\n\n    if (touchEvent) {\n      invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n    }\n  }\n\n  //\n  // Events Sending\n  //\n\n  public sendEvent = (newState: State, oldState: State): void => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange }: PropsRef =\n      this.propsRef.current as PropsRef;\n\n    const resultEvent: ResultEvent = this.transformEventData(\n      newState,\n      oldState\n    );\n\n    // In the new API oldState field has to be undefined, unless we send event state changed\n    // Here the order is flipped to avoid workarounds such as making backup of the state and setting it to undefined first, then changing it back\n    // Flipping order with setting oldState to undefined solves issue, when events were being sent twice instead of once\n    // However, this may cause trouble in the future (but for now we don't know that)\n\n    if (this.lastSentState !== newState) {\n      this.lastSentState = newState;\n      invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n    }\n    if (this.currentState === State.ACTIVE) {\n      resultEvent.nativeEvent.oldState = undefined;\n      invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n    }\n  };\n\n  private transformEventData(newState: State, oldState: State): ResultEvent {\n    return {\n      nativeEvent: {\n        numberOfPointers: this.tracker.getTrackedPointersCount(),\n        state: newState,\n        pointerInside: isPointerInBounds(this.view, {\n          x: this.tracker.getLastAvgX(),\n          y: this.tracker.getLastAvgY(),\n        }),\n        ...this.transformNativeEvent(),\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: newState !== oldState ? oldState : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private transformTouchEvent(\n    event: AdaptedEvent\n  ): ResultTouchEvent | undefined {\n    const rect = this.view.getBoundingClientRect();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    // This if handles edge case where all pointers have been cancelled\n    // When pointercancel is triggered, reset method is called. This means that tracker will be reset after first pointer being cancelled\n    // The problem is, that handler will receive another pointercancel event from the rest of the pointers\n    // To avoid crashing, we don't send event if tracker tracks no pointers, i.e. has been reset\n    if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    // Each pointer sends its own event, so we want changed touches to contain only the pointer that has changed.\n    // However, if the event is cancel, we want to cancel all pointers to avoid crashes\n    if (event.eventType !== EventTypes.CANCEL) {\n      changed.push({\n        id: this.tracker.getMappedTouchEventId(event.pointerId),\n        x: event.x - rect.left,\n        y: event.y - rect.top,\n        absoluteX: event.x,\n        absoluteY: event.y,\n      });\n    } else {\n      trackerData.forEach((element: TrackerElement, key: number): void => {\n        const id: number = this.tracker.getMappedTouchEventId(key);\n\n        changed.push({\n          id: id,\n          x: element.lastX - rect.left,\n          y: element.lastY - rect.top,\n          absoluteX: element.lastX,\n          absoluteY: element.lastY,\n        });\n      });\n    }\n\n    let eventType: TouchEventType = TouchEventType.UNDETERMINED;\n\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        eventType = TouchEventType.DOWN;\n        break;\n      case EventTypes.UP:\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        eventType = TouchEventType.UP;\n        break;\n      case EventTypes.MOVE:\n        eventType = TouchEventType.MOVE;\n        break;\n      case EventTypes.CANCEL:\n        eventType = TouchEventType.CANCELLED;\n        break;\n    }\n\n    // Here, when we receive up event, we want to decrease number of touches\n    // That's because we want handler to send information that there's one pointer less\n    // However, we still want this pointer to be present in allTouches array, so that its data can be accessed\n    let numberOfTouches: number = all.length;\n\n    if (\n      event.eventType === EventTypes.UP ||\n      event.eventType === EventTypes.ADDITIONAL_POINTER_UP\n    ) {\n      --numberOfTouches;\n    }\n\n    return {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: event.touchEventType ?? eventType,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: numberOfTouches,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private cancelTouches(): void {\n    const rect = this.view.getBoundingClientRect();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    if (trackerData.size === 0) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n\n      changed.push({\n        id: id,\n        x: element.lastX - rect.left,\n        y: element.lastY - rect.top,\n        absoluteX: element.lastX,\n        absoluteY: element.lastY,\n      });\n    });\n\n    const cancelEvent: ResultTouchEvent = {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: TouchEventType.CANCELLED,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: all.length,\n      },\n      timeStamp: Date.now(),\n    };\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n  }\n\n  protected transformNativeEvent() {\n    return {};\n  }\n\n  //\n  // Handling config\n  //\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    this.config = { enabled: enabled, ...props };\n    this.enabled = enabled;\n\n    if (this.config.shouldCancelWhenOutside !== undefined) {\n      this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n    }\n\n    this.validateHitSlops();\n\n    if (this.enabled) {\n      return;\n    }\n\n    switch (this.currentState) {\n      case State.ACTIVE:\n        this.fail(true);\n        break;\n      case State.UNDETERMINED:\n        GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(\n          this\n        );\n        break;\n      default:\n        this.cancel(true);\n        break;\n    }\n  }\n\n  protected checkCustomActivationCriteria(criterias: string[]): void {\n    for (const key in this.config) {\n      if (criterias.indexOf(key) >= 0) {\n        this.hasCustomActivationCriteria = true;\n      }\n    }\n  }\n\n  private validateHitSlops(): void {\n    if (!this.config.hitSlop) {\n      return;\n    }\n\n    if (\n      this.config.hitSlop.left !== undefined &&\n      this.config.hitSlop.right !== undefined &&\n      this.config.hitSlop.width !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define left, right and width at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.width !== undefined &&\n      this.config.hitSlop.left === undefined &&\n      this.config.hitSlop.right === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When width is defined, either left or right has to be defined'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top !== undefined &&\n      this.config.hitSlop.bottom !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define top, bottom and height at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top === undefined &&\n      this.config.hitSlop.bottom === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When height is defined, either top or bottom has to be defined'\n      );\n    }\n  }\n\n  private checkHitSlop(): boolean {\n    if (!this.config.hitSlop) {\n      return true;\n    }\n\n    const width = this.view.getBoundingClientRect().width;\n    const height = this.view.getBoundingClientRect().height;\n\n    let left = 0;\n    let top = 0;\n    let right: number = width;\n    let bottom: number = height;\n\n    if (this.config.hitSlop.horizontal !== undefined) {\n      left -= this.config.hitSlop.horizontal;\n      right += this.config.hitSlop.horizontal;\n    }\n\n    if (this.config.hitSlop.vertical !== undefined) {\n      top -= this.config.hitSlop.vertical;\n      bottom += this.config.hitSlop.vertical;\n    }\n\n    if (this.config.hitSlop.left !== undefined) {\n      left = -this.config.hitSlop.left;\n    }\n\n    if (this.config.hitSlop.right !== undefined) {\n      right = width + this.config.hitSlop.right;\n    }\n\n    if (this.config.hitSlop.top !== undefined) {\n      top = -this.config.hitSlop.top;\n    }\n\n    if (this.config.hitSlop.bottom !== undefined) {\n      bottom = width + this.config.hitSlop.bottom;\n    }\n    if (this.config.hitSlop.width !== undefined) {\n      if (this.config.hitSlop.left !== undefined) {\n        right = left + this.config.hitSlop.width;\n      } else if (this.config.hitSlop.right !== undefined) {\n        left = right - this.config.hitSlop.width;\n      }\n    }\n\n    if (this.config.hitSlop.height !== undefined) {\n      if (this.config.hitSlop.top !== undefined) {\n        bottom = top + this.config.hitSlop.height;\n      } else if (this.config.hitSlop.bottom !== undefined) {\n        top = bottom - this.config.hitSlop.height;\n      }\n    }\n\n    const rect: DOMRect = this.view.getBoundingClientRect();\n    const offsetX: number = this.tracker.getLastX() - rect.left;\n    const offsetY: number = this.tracker.getLastY() - rect.top;\n\n    if (\n      offsetX >= left &&\n      offsetX <= right &&\n      offsetY >= top &&\n      offsetY <= bottom\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  public isPointerInBounds({ x, y }: { x: number; y: number }): boolean {\n    const rect: DOMRect = this.view.getBoundingClientRect();\n\n    return (\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom\n    );\n  }\n\n  protected resetConfig(): void {}\n\n  //\n  // Getters and setters\n  //\n\n  public getTag(): number {\n    return this.handlerTag;\n  }\n  public setTag(tag: number): void {\n    this.handlerTag = tag;\n  }\n\n  protected getConfig() {\n    return this.config;\n  }\n\n  public getShouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  public getView(): HTMLElement {\n    return this.view;\n  }\n\n  public getEventManagers(): EventManager[] {\n    return this.eventManagers;\n  }\n\n  public getTracker(): PointerTracker {\n    return this.tracker;\n  }\n\n  public getTrackedPointersID(): number[] {\n    return this.tracker.getTrackedPointersID();\n  }\n\n  public getState(): State {\n    return this.currentState;\n  }\n\n  public isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  private isFinished(): boolean {\n    return (\n      this.currentState === State.END ||\n      this.currentState === State.FAILED ||\n      this.currentState === State.CANCELLED\n    );\n  }\n\n  protected setShouldCancelWhenOutside(shouldCancel: boolean) {\n    this.shouldCancellWhenOutside = shouldCancel;\n  }\n  protected getShouldCancelWhenOutside(): boolean {\n    return this.shouldCancellWhenOutside;\n  }\n\n  public getPointerType(): PointerType {\n    return this.pointerType;\n  }\n}\n\nfunction invokeNullableMethod(\n  method:\n    | ((event: ResultEvent | ResultTouchEvent) => void)\n    | { __getHandler: () => (event: ResultEvent | ResultTouchEvent) => void }\n    | { __nodeConfig: { argMapping: unknown[] } },\n  event: ResultEvent | ResultTouchEvent\n): void {\n  if (!method) {\n    return;\n  }\n\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    const handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n\n  const { argMapping } = method.__nodeConfig;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n\n  for (const [index, [key, value]] of argMapping.entries()) {\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const nativeValue = event.nativeEvent[key];\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (value?.setValue) {\n      //Reanimated API\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      value.setValue(nativeValue);\n    } else {\n      //RN Animated API\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n\n  return;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}