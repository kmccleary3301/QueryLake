{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport VelocityTracker from \"./VelocityTracker\";\nvar MAX_POINTERS = 20;\nvar PointerTracker = function () {\n  function PointerTracker() {\n    _classCallCheck(this, PointerTracker);\n    _defineProperty(this, \"velocityTracker\", new VelocityTracker());\n    _defineProperty(this, \"trackedPointers\", new Map());\n    _defineProperty(this, \"touchEventsIds\", new Map());\n    _defineProperty(this, \"lastMovedPointerId\", void 0);\n    _defineProperty(this, \"cachedAverages\", {\n      x: 0,\n      y: 0\n    });\n    this.lastMovedPointerId = NaN;\n    for (var i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n  _createClass(PointerTracker, [{\n    key: \"addToTracker\",\n    value: function addToTracker(event) {\n      if (this.trackedPointers.has(event.pointerId)) {\n        return;\n      }\n      this.lastMovedPointerId = event.pointerId;\n      var newElement = {\n        lastX: event.x,\n        lastY: event.y,\n        timeStamp: event.time,\n        velocityX: 0,\n        velocityY: 0\n      };\n      this.trackedPointers.set(event.pointerId, newElement);\n      this.mapTouchEventId(event.pointerId);\n      this.cachedAverages = {\n        x: this.getLastAvgX(),\n        y: this.getLastAvgY()\n      };\n    }\n  }, {\n    key: \"removeFromTracker\",\n    value: function removeFromTracker(pointerId) {\n      this.trackedPointers.delete(pointerId);\n      this.removeMappedTouchId(pointerId);\n    }\n  }, {\n    key: \"track\",\n    value: function track(event) {\n      var element = this.trackedPointers.get(event.pointerId);\n      if (!element) {\n        return;\n      }\n      this.lastMovedPointerId = event.pointerId;\n      this.velocityTracker.add(event);\n      var _this$velocityTracker = this.velocityTracker.getVelocity(),\n        _this$velocityTracker2 = _slicedToArray(_this$velocityTracker, 2),\n        velocityX = _this$velocityTracker2[0],\n        velocityY = _this$velocityTracker2[1];\n      element.velocityX = velocityX;\n      element.velocityY = velocityY;\n      element.lastX = event.x;\n      element.lastY = event.y;\n      this.trackedPointers.set(event.pointerId, element);\n      var avgX = this.getLastAvgX();\n      var avgY = this.getLastAvgY();\n      this.cachedAverages = {\n        x: avgX,\n        y: avgY\n      };\n    }\n  }, {\n    key: \"mapTouchEventId\",\n    value: function mapTouchEventId(id) {\n      for (var _ref of this.touchEventsIds) {\n        var _ref2 = _slicedToArray(_ref, 2);\n        var mappedId = _ref2[0];\n        var touchId = _ref2[1];\n        if (isNaN(touchId)) {\n          this.touchEventsIds.set(mappedId, id);\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"removeMappedTouchId\",\n    value: function removeMappedTouchId(id) {\n      var mappedId = this.getMappedTouchEventId(id);\n      if (!isNaN(mappedId)) {\n        this.touchEventsIds.set(mappedId, NaN);\n      }\n    }\n  }, {\n    key: \"getMappedTouchEventId\",\n    value: function getMappedTouchEventId(touchEventId) {\n      for (var _ref3 of this.touchEventsIds.entries()) {\n        var _ref4 = _slicedToArray(_ref3, 2);\n        var key = _ref4[0];\n        var value = _ref4[1];\n        if (value === touchEventId) {\n          return key;\n        }\n      }\n      return NaN;\n    }\n  }, {\n    key: \"getVelocityX\",\n    value: function getVelocityX(pointerId) {\n      var _this$trackedPointers;\n      return (_this$trackedPointers = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers === void 0 ? void 0 : _this$trackedPointers.velocityX;\n    }\n  }, {\n    key: \"getVelocityY\",\n    value: function getVelocityY(pointerId) {\n      var _this$trackedPointers2;\n      return (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers2 === void 0 ? void 0 : _this$trackedPointers2.velocityY;\n    }\n  }, {\n    key: \"getLastX\",\n    value: function getLastX(pointerId) {\n      if (pointerId !== undefined) {\n        var _this$trackedPointers3;\n        return (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers3 === void 0 ? void 0 : _this$trackedPointers3.lastX;\n      } else {\n        var _this$trackedPointers4;\n        return (_this$trackedPointers4 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers4 === void 0 ? void 0 : _this$trackedPointers4.lastX;\n      }\n    }\n  }, {\n    key: \"getLastY\",\n    value: function getLastY(pointerId) {\n      if (pointerId !== undefined) {\n        var _this$trackedPointers5;\n        return (_this$trackedPointers5 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers5 === void 0 ? void 0 : _this$trackedPointers5.lastY;\n      } else {\n        var _this$trackedPointers6;\n        return (_this$trackedPointers6 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers6 === void 0 ? void 0 : _this$trackedPointers6.lastY;\n      }\n    }\n  }, {\n    key: \"getLastAvgX\",\n    value: function getLastAvgX() {\n      var avgX = this.getSumX() / this.trackedPointers.size;\n      return isNaN(avgX) ? this.cachedAverages.x : avgX;\n    }\n  }, {\n    key: \"getLastAvgY\",\n    value: function getLastAvgY() {\n      var avgY = this.getSumY() / this.trackedPointers.size;\n      return isNaN(avgY) ? this.cachedAverages.y : avgY;\n    }\n  }, {\n    key: \"getSumX\",\n    value: function getSumX(ignoredPointer) {\n      var sumX = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumX += value.lastX;\n        }\n      });\n      return sumX;\n    }\n  }, {\n    key: \"getSumY\",\n    value: function getSumY(ignoredPointer) {\n      var sumY = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumY += value.lastY;\n        }\n      });\n      return sumY;\n    }\n  }, {\n    key: \"getTrackedPointersCount\",\n    value: function getTrackedPointersCount() {\n      return this.trackedPointers.size;\n    }\n  }, {\n    key: \"getTrackedPointersID\",\n    value: function getTrackedPointersID() {\n      var keys = [];\n      this.trackedPointers.forEach(function (_value, key) {\n        keys.push(key);\n      });\n      return keys;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.trackedPointers;\n    }\n  }, {\n    key: \"resetTracker\",\n    value: function resetTracker() {\n      this.velocityTracker.reset();\n      this.trackedPointers.clear();\n      this.lastMovedPointerId = NaN;\n      for (var i = 0; i < MAX_POINTERS; ++i) {\n        this.touchEventsIds.set(i, NaN);\n      }\n    }\n  }], [{\n    key: \"shareCommonPointers\",\n    value: function shareCommonPointers(stPointers, ndPointers) {\n      return stPointers.some(function (pointerId) {\n        return ndPointers.includes(pointerId);\n      });\n    }\n  }]);\n  return PointerTracker;\n}();\nexport { PointerTracker as default };","map":{"version":3,"names":["VelocityTracker","MAX_POINTERS","PointerTracker","_classCallCheck","_defineProperty","Map","x","y","lastMovedPointerId","NaN","i","touchEventsIds","set","_createClass","key","value","addToTracker","event","trackedPointers","has","pointerId","newElement","lastX","lastY","timeStamp","time","velocityX","velocityY","mapTouchEventId","cachedAverages","getLastAvgX","getLastAvgY","removeFromTracker","delete","removeMappedTouchId","track","element","get","velocityTracker","add","_this$velocityTracker","getVelocity","_this$velocityTracker2","_slicedToArray","avgX","avgY","id","_ref","_ref2","mappedId","touchId","isNaN","getMappedTouchEventId","touchEventId","_ref3","entries","_ref4","getVelocityX","_this$trackedPointers","getVelocityY","_this$trackedPointers2","getLastX","undefined","_this$trackedPointers3","_this$trackedPointers4","getLastY","_this$trackedPointers5","_this$trackedPointers6","getSumX","size","getSumY","ignoredPointer","sumX","forEach","sumY","getTrackedPointersCount","getTrackedPointersID","keys","_value","push","getData","resetTracker","reset","clear","shareCommonPointers","stPointers","ndPointers","some","includes","default"],"sources":["C:\\alt\\projects\\school\\3035\\QueryLake\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\PointerTracker.ts"],"sourcesContent":["import { AdaptedEvent } from '../interfaces';\nimport VelocityTracker from './VelocityTracker';\n\nexport interface TrackerElement {\n  lastX: number;\n  lastY: number;\n\n  timeStamp: number;\n\n  velocityX: number;\n  velocityY: number;\n}\n\nconst MAX_POINTERS = 20;\n\nexport default class PointerTracker {\n  private velocityTracker = new VelocityTracker();\n  private trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  private touchEventsIds: Map<number, number> = new Map<number, number>();\n\n  private lastMovedPointerId: number;\n\n  private cachedAverages: { x: number; y: number } = { x: 0, y: 0 };\n\n  public constructor() {\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public addToTracker(event: AdaptedEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const newElement: TrackerElement = {\n      lastX: event.x,\n      lastY: event.y,\n      timeStamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n\n    this.cachedAverages = {\n      x: this.getLastAvgX(),\n      y: this.getLastAvgY(),\n    };\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n\n  public track(event: AdaptedEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    this.velocityTracker.add(event);\n    const [velocityX, velocityY] = this.velocityTracker.getVelocity();\n\n    element.velocityX = velocityX;\n    element.velocityY = velocityY;\n\n    element.lastX = event.x;\n    element.lastY = event.y;\n\n    this.trackedPointers.set(event.pointerId, element);\n\n    const avgX: number = this.getLastAvgX();\n    const avgY: number = this.getLastAvgY();\n\n    this.cachedAverages = {\n      x: avgX,\n      y: avgY,\n    };\n  }\n\n  //Mapping TouchEvents ID\n  private mapTouchEventId(id: number): void {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n\n  private removeMappedTouchId(id: number): void {\n    const mappedId: number = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n\n  public getMappedTouchEventId(touchEventId: number): number {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n\n    return NaN;\n  }\n\n  public getVelocityX(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityX as number;\n  }\n  public getVelocityY(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityY as number;\n  }\n\n  /**\n   * Returns X coordinate of last moved pointer\n   */\n  public getLastX(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns X coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastX(pointerId: number): number;\n\n  public getLastX(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastX as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastX as number;\n    }\n  }\n\n  /**\n   * Returns Y coordinate of last moved pointer\n   */\n  public getLastY(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns Y coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastY(pointerId: number): number;\n\n  public getLastY(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastY as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastY as number;\n    }\n  }\n\n  // Some handlers use these methods to send average values in native event.\n  // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n  // In situation when NaN would be sent as a response, we return cached value.\n  // That prevents handlers from crashing\n  public getLastAvgX(): number {\n    const avgX: number = this.getSumX() / this.trackedPointers.size;\n    return isNaN(avgX) ? this.cachedAverages.x : avgX;\n  }\n  public getLastAvgY(): number {\n    const avgY: number = this.getSumY() / this.trackedPointers.size;\n    return isNaN(avgY) ? this.cachedAverages.y : avgY;\n  }\n  public getSumX(ignoredPointer?: number): number {\n    let sumX = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumX += value.lastX;\n      }\n    });\n\n    return sumX;\n  }\n  public getSumY(ignoredPointer?: number): number {\n    let sumY = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumY += value.lastY;\n      }\n    });\n\n    return sumY;\n  }\n  public getTrackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n  public getTrackedPointersID(): number[] {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public getData(): Map<number, TrackerElement> {\n    return this.trackedPointers;\n  }\n\n  public resetTracker(): void {\n    this.velocityTracker.reset();\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}