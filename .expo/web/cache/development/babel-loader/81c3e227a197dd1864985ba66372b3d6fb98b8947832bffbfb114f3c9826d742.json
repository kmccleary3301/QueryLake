{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport Hammer from '@egjs/hammerjs';\nimport { MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD, MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD } from \"./constants\";\nimport DraggingGestureHandler from \"./DraggingGestureHandler\";\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from \"./utils\";\nimport { State } from \"../State\";\nvar PanGestureHandler = function (_DraggingGestureHandl) {\n  _inherits(PanGestureHandler, _DraggingGestureHandl);\n  var _super = _createSuper(PanGestureHandler);\n  function PanGestureHandler() {\n    _classCallCheck(this, PanGestureHandler);\n    return _super.apply(this, arguments);\n  }\n  _createClass(PanGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'pan';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Pan;\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(PanGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        direction: this.getDirection()\n      });\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      var nextState = _get(_getPrototypeOf(PanGestureHandler.prototype), \"getState\", this).call(this, type);\n      if (this.previousState === State.UNDETERMINED && nextState === State.ACTIVE) {\n        return State.BEGAN;\n      }\n      return nextState;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var config = this.getConfig();\n      var activeOffsetXStart = config.activeOffsetXStart,\n        activeOffsetXEnd = config.activeOffsetXEnd,\n        activeOffsetYStart = config.activeOffsetYStart,\n        activeOffsetYEnd = config.activeOffsetYEnd,\n        minDist = config.minDist;\n      var directions = [];\n      var horizontalDirections = [];\n      if (!isnan(minDist)) {\n        return Hammer.DIRECTION_ALL;\n      }\n      if (!isnan(activeOffsetXStart)) {\n        horizontalDirections.push(Hammer.DIRECTION_LEFT);\n      }\n      if (!isnan(activeOffsetXEnd)) {\n        horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n      }\n      if (horizontalDirections.length === 2) {\n        horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n      }\n      directions = directions.concat(horizontalDirections);\n      var verticalDirections = [];\n      if (!isnan(activeOffsetYStart)) {\n        verticalDirections.push(Hammer.DIRECTION_UP);\n      }\n      if (!isnan(activeOffsetYEnd)) {\n        verticalDirections.push(Hammer.DIRECTION_DOWN);\n      }\n      if (verticalDirections.length === 2) {\n        verticalDirections = [Hammer.DIRECTION_VERTICAL];\n      }\n      directions = directions.concat(verticalDirections);\n      if (!directions.length) {\n        return Hammer.DIRECTION_NONE;\n      }\n      if (directions[0] === Hammer.DIRECTION_HORIZONTAL && directions[1] === Hammer.DIRECTION_VERTICAL) {\n        return Hammer.DIRECTION_ALL;\n      }\n      if (horizontalDirections.length && verticalDirections.length) {\n        return Hammer.DIRECTION_ALL;\n      }\n      return directions[0];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this.hasCustomActivationCriteria) {\n        return {\n          minDistSq: 10\n        };\n      }\n      return this.config;\n    }\n  }, {\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, criteria) {\n      var deltaX = _ref.deltaX,\n        deltaY = _ref.deltaY;\n      return !isnan(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !isnan(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n    }\n  }, {\n    key: \"shouldActivateUnderCustomCriteria\",\n    value: function shouldActivateUnderCustomCriteria(_ref2, criteria) {\n      var deltaX = _ref2.deltaX,\n        deltaY = _ref2.deltaY,\n        velocity = _ref2.velocity;\n      return !isnan(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !isnan(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !isnan(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !isnan(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n        x: deltaX,\n        y: deltaY\n      }), criteria.minDistSq) || TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) || TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq);\n    }\n  }, {\n    key: \"shouldMultiFingerPanFail\",\n    value: function shouldMultiFingerPanFail(_ref3) {\n      var pointerLength = _ref3.pointerLength,\n        scale = _ref3.scale,\n        deltaRotation = _ref3.deltaRotation;\n      if (pointerLength <= 1) {\n        return false;\n      }\n      var deltaScale = Math.abs(scale - 1);\n      var absDeltaRotation = Math.abs(deltaRotation);\n      if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n        return true;\n      }\n      if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(criteria) {\n      return isValidNumber(criteria.minDistSq) || isValidNumber(criteria.minVelocityX) || isValidNumber(criteria.minVelocityY) || isValidNumber(criteria.minVelocitySq) || isValidNumber(criteria.activeOffsetXStart) || isValidNumber(criteria.activeOffsetXEnd) || isValidNumber(criteria.activeOffsetYStart) || isValidNumber(criteria.activeOffsetYEnd);\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(props, _recognizer, inputData) {\n      if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n        return {\n          failed: true\n        };\n      }\n      var velocity = {\n        x: inputData.velocityX,\n        y: inputData.velocityY\n      };\n      if (this.hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n        deltaX: inputData.deltaX,\n        deltaY: inputData.deltaY,\n        velocity: velocity\n      }, props)) {\n        if (this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation\n        })) {\n          return {\n            failed: true\n          };\n        }\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false\n      };\n    }\n  }]);\n  return PanGestureHandler;\n}(DraggingGestureHandler);\nexport default PanGestureHandler;","map":{"version":3,"names":["Hammer","MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD","MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD","DraggingGestureHandler","isValidNumber","isnan","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","State","PanGestureHandler","_DraggingGestureHandl","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","Pan","value","getHammerConfig","_objectSpread","_get","_getPrototypeOf","prototype","call","direction","getDirection","getState","type","nextState","previousState","UNDETERMINED","ACTIVE","BEGAN","config","getConfig","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","minDist","directions","horizontalDirections","DIRECTION_ALL","push","DIRECTION_LEFT","DIRECTION_RIGHT","length","DIRECTION_HORIZONTAL","concat","verticalDirections","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_VERTICAL","DIRECTION_NONE","hasCustomActivationCriteria","minDistSq","shouldFailUnderCustomCriteria","_ref","criteria","deltaX","deltaY","failOffsetXStart","failOffsetXEnd","failOffsetYStart","failOffsetYEnd","shouldActivateUnderCustomCriteria","_ref2","velocity","x","y","minVelocityX","minVelocityY","minVelocitySq","shouldMultiFingerPanFail","_ref3","pointerLength","scale","deltaRotation","deltaScale","Math","abs","absDeltaRotation","updateHasCustomActivationCriteria","isGestureEnabledForEvent","props","_recognizer","inputData","failed","velocityX","velocityY","maxPointers","success"],"sources":["C:\\alt\\projects\\school\\3035\\QueryLake\\node_modules\\react-native-gesture-handler\\lib\\module\\web_hammer\\PanGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport {\n  EventMap,\n  MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD,\n  MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD,\n} from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\nimport { State } from '../State';\n\nimport { Config, HammerInputExt } from './GestureHandler';\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      direction: this.getDirection(),\n    };\n  }\n\n  getState(type: keyof typeof EventMap) {\n    const nextState = super.getState(type);\n    // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n    if (\n      this.previousState === State.UNDETERMINED &&\n      nextState === State.ACTIVE\n    ) {\n      return State.BEGAN;\n    }\n    return nextState;\n  }\n\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist,\n    } = config;\n    let directions: number[] = [];\n    let horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart)) {\n      horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    }\n    if (!isnan(activeOffsetXEnd)) {\n      horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (horizontalDirections.length === 2) {\n      horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n    }\n\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n\n    if (!isnan(activeOffsetYStart)) {\n      verticalDirections.push(Hammer.DIRECTION_UP);\n    }\n    if (!isnan(activeOffsetYEnd)) {\n      verticalDirections.push(Hammer.DIRECTION_DOWN);\n    }\n\n    if (verticalDirections.length === 2) {\n      verticalDirections = [Hammer.DIRECTION_VERTICAL];\n    }\n\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n    if (\n      directions[0] === Hammer.DIRECTION_HORIZONTAL &&\n      directions[1] === Hammer.DIRECTION_VERTICAL\n    ) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { deltaX, deltaY }: HammerInputExt,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.failOffsetXStart) &&\n        deltaX < criteria.failOffsetXStart) ||\n      (!isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd) ||\n      (!isnan(criteria.failOffsetYStart) &&\n        deltaY < criteria.failOffsetYStart) ||\n      (!isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd)\n    );\n  }\n\n  shouldActivateUnderCustomCriteria(\n    { deltaX, deltaY, velocity }: any,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.activeOffsetXStart) &&\n        deltaX < criteria.activeOffsetXStart) ||\n      (!isnan(criteria.activeOffsetXEnd) &&\n        deltaX > criteria.activeOffsetXEnd) ||\n      (!isnan(criteria.activeOffsetYStart) &&\n        deltaY < criteria.activeOffsetYStart) ||\n      (!isnan(criteria.activeOffsetYEnd) &&\n        deltaY > criteria.activeOffsetYEnd) ||\n      TEST_MIN_IF_NOT_NAN(\n        VEC_LEN_SQ({ x: deltaX, y: deltaY }),\n        criteria.minDistSq\n      ) ||\n      TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) ||\n      TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq)\n    );\n  }\n\n  shouldMultiFingerPanFail({\n    pointerLength,\n    scale,\n    deltaRotation,\n  }: {\n    deltaRotation: number;\n    pointerLength: number;\n    scale: number;\n  }) {\n    if (pointerLength <= 1) {\n      return false;\n    }\n\n    // Test if the pan had too much pinching or rotating.\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(\n    criteria: Config & { minVelocityX?: number; minVelocityY?: number }\n  ) {\n    return (\n      isValidNumber(criteria.minDistSq) ||\n      isValidNumber(criteria.minVelocityX) ||\n      isValidNumber(criteria.minVelocityY) ||\n      isValidNumber(criteria.minVelocitySq) ||\n      isValidNumber(criteria.activeOffsetXStart) ||\n      isValidNumber(criteria.activeOffsetXEnd) ||\n      isValidNumber(criteria.activeOffsetYStart) ||\n      isValidNumber(criteria.activeOffsetYEnd)\n    );\n  }\n\n  isGestureEnabledForEvent(\n    props: any,\n    _recognizer: any,\n    inputData: HammerInputExt & { deltaRotation: number }\n  ) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return { failed: true };\n    }\n\n    const velocity = { x: inputData.velocityX, y: inputData.velocityY };\n    if (\n      this.hasCustomActivationCriteria &&\n      this.shouldActivateUnderCustomCriteria(\n        { deltaX: inputData.deltaX, deltaY: inputData.deltaY, velocity },\n        props\n      )\n    ) {\n      if (\n        this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation,\n        })\n      ) {\n        return {\n          failed: true,\n        };\n      }\n      return { success: true };\n    }\n    return { success: false };\n  }\n}\n\nexport default PanGestureHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}