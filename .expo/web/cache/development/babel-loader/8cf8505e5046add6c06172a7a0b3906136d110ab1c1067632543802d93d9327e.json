{"ast":null,"code":"function setAndForwardRef(_ref) {\n  var getForwardedRef = _ref.getForwardedRef,\n    setLocalRef = _ref.setLocalRef;\n  return function forwardRef(ref) {\n    var forwardedRef = getForwardedRef();\n    setLocalRef(ref);\n    if (typeof forwardedRef === 'function') {\n      forwardedRef(ref);\n    } else if (typeof forwardedRef === 'object' && forwardedRef != null) {\n      forwardedRef.current = ref;\n    }\n  };\n}\nexport default setAndForwardRef;","map":{"version":3,"names":["setAndForwardRef","_ref","getForwardedRef","setLocalRef","forwardRef","ref","forwardedRef","current"],"sources":["C:\\alt\\projects\\school\\3035\\QueryLake\\node_modules\\react-native-reanimated\\lib\\module\\setAndForwardRef.ts"],"sourcesContent":["/**\n * imported from react-native\n */\n\nimport { MutableRefObject } from 'react';\n\n/**\n * This is a helper function for when a component needs to be able to forward a ref\n * to a child component, but still needs to have access to that component as part of\n * its implementation.\n *\n * Its main use case is in wrappers for native components.\n *\n * Usage:\n *\n *   class MyView extends React.Component {\n *     _nativeRef = null;\n *\n *     _setNativeRef = setAndForwardRef({\n *       getForwardedRef: () => this.props.forwardedRef,\n *       setLocalRef: ref => {\n *         this._nativeRef = ref;\n *       },\n *     });\n *\n *     render() {\n *       return <View ref={this._setNativeRef} />;\n *     }\n *   }\n *\n *   const MyViewWithRef = React.forwardRef((props, ref) => (\n *     <MyView {...props} forwardedRef={ref} />\n *   ));\n *\n *   module.exports = MyViewWithRef;\n */\n\nexport type ForwardedRef<T> = () => MutableRefObject<T> | ((ref: T) => void);\n\nfunction setAndForwardRef<T>({\n  getForwardedRef,\n  setLocalRef,\n}: {\n  getForwardedRef: ForwardedRef<T>;\n  setLocalRef: (ref: T) => void;\n}): (ref: T) => void {\n  return function forwardRef(ref: T) {\n    const forwardedRef = getForwardedRef();\n\n    setLocalRef(ref);\n\n    // Forward to user ref prop (if one has been specified)\n    if (typeof forwardedRef === 'function') {\n      // Handle function-based refs. String-based refs are handled as functions.\n      forwardedRef(ref);\n    } else if (typeof forwardedRef === 'object' && forwardedRef != null) {\n      // Handle createRef-based refs\n      forwardedRef.current = ref;\n    }\n  };\n}\n\nexport default setAndForwardRef;\n"],"mappings":"AAuCA,SAASA,gBAAgBA,CAAAC,IAAA,EAMJ;EAAA,IALnBC,eAAe,GAKhBD,IAAA,CALCC,eAAe;IACfC,WAAA,GAIDF,IAAA,CAJCE,WAAA;EAKA,OAAO,SAASC,UAAUA,CAACC,GAAM,EAAE;IACjC,IAAMC,YAAY,GAAGJ,eAAe,EAAE;IAEtCC,WAAW,CAACE,GAAG,CAAC;IAGhB,IAAI,OAAOC,YAAY,KAAK,UAAU,EAAE;MAEtCA,YAAY,CAACD,GAAG,CAAC;IACnB,CAAC,MAAM,IAAI,OAAOC,YAAY,KAAK,QAAQ,IAAIA,YAAY,IAAI,IAAI,EAAE;MAEnEA,YAAY,CAACC,OAAO,GAAGF,GAAG;IAC5B;EACF,CAAC;AACH;AAEA,eAAeL,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}